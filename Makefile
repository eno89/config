# Makefile to update config.
# NOTE: GNU make is required.
ID=$$Id$$#{{{1

all: update
.PHONY: all clean update update-dot-files update-opera

SHELL=/bin/sh
# For testing `update', use like DESTDIR=./test
DESTDIR=


ALL_GROUPS=DOTS OPERA

GROUP_DOTS_FILES=\
  dot.bash_profile \
  dot.bashrc \
  dot.inputrc \
  dot.mayu \
  dot.screenrc \
  dot.Xdefaults
GROUP_DOTS_RULE=$(patsubst dot.%,$(HOME)/.%,$(1))

GROUP_OPERA_FILES=\
  opera/keyboard/my-keyboard.ini \
  opera/keyboard/standard_keyboard-stripped.ini \
  opera/menu/my-menu.ini \
  opera/search.ini \
  opera/styles/user.css \
  opera/toolbar/my-toolbar.ini
GROUP_OPERA_RULE=$(patsubst opera/%,$(GROUP_OPERA_DIR)/%,$(1))
GROUP_OPERA_DIR=$(abspath opera/profile-link)




# update  #{{{1
# Rules for `update' are generated by eval.

UPDATE_DIR=mkdir -p
UPDATE_FILE=cp

RemoveCurrentDirectory=$(filter-out ./,$(1))
RemoveDuplicates=$(sort $(1))
CallRule=$(call RemoveCurrentDirectory,$(call GROUP_$(1)_RULE,$(2)))

define GenerateRulesToUpdateFile  # (src, dest)
update: $(DESTDIR)$(2)
$(DESTDIR)$(2): $(1)
	$(UPDATE_FILE) '$$<' '$$@'

endef

define GenerateRulesToUpdateDirectory  # (dest)
update: $(DESTDIR)$(1)
$(DESTDIR)$(1):
	$(UPDATE_DIR) '$$@'

endef

define GenerateRulesFromGroup  # (group_name)
$(foreach directory, \
  $(call RemoveDuplicates,$(dir $(call CallRule,$(1),$(GROUP_$(1)_FILES)))), \
  $(call GenerateRulesToUpdateDirectory,$(directory)))
$(foreach file, \
   $(GROUP_$(1)_FILES), \
   $(call GenerateRulesToUpdateFile,$(file),$(call CallRule,$(1),$(file))))
endef

$(eval $(foreach group,$(ALL_GROUPS),$(call GenerateRulesFromGroup,$(group))))




# clean  #{{{1

clean:
	rm -rf `find -name '*~' -or -name ',*'`




# __END__
# vim: foldmethod=marker
