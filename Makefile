# Makefile to update config.
# NOTE: GNU make is required.
ID=$$Id$$#{{{1

all: update
.PHONY: all clean package _package update

SHELL=/bin/sh
# For testing `update', use like DESTDIR=./test
DESTDIR=




# Group definitions  #{{{1
ALL_GROUPS=DOTS OPERA SAMURIZE VIM

GROUP_DOTS_FILES=\
  dot.bash_profile \
  dot.bashrc \
  dot.bash/bash_completion \
  dot.bash/cdhist.sh \
  dot.inputrc \
  dot.mayu \
  dot.screenrc \
  dot.Xdefaults
GROUP_DOTS_RULE=$(patsubst dot.%,$(HOME)/.%,$(1))

GROUP_OPERA_FILES=\
  opera/keyboard/my-keyboard.ini \
  opera/keyboard/standard_keyboard-stripped.ini \
  opera/menu/my-menu.ini \
  opera/search.ini \
  opera/styles/user.css \
  opera/toolbar/my-toolbar.ini
GROUP_OPERA_RULE=$(patsubst opera/%,$(GROUP_OPERA_DIR)/%,$(1))
GROUP_OPERA_DIR=$(abspath opera/profile-link)

GROUP_VIM_FILES=\
  vim/dot.vim/colors/black_angus.vim \
  vim/dot.vim/colors/gothic.vim \
  vim/dot.vim/colors/less.vim \
  $(GROUP_VIM_DOC_FILES) \
  vim/dot.vim/ftplugin/bugs.vim \
  vim/dot.vim/ftplugin/c_tofunc.vim \
  vim/dot.vim/ftplugin/issue.vim \
  vim/dot.vim/ftplugin/vim_tofunc.vim \
  vim/dot.vim/plugin/buffuzzy.vim \
  vim/dot.vim/plugin/scratch.vim \
  vim/dot.vim/plugin/surround.vim \
  vim/dot.vim/plugin/tofunc.vim \
  vim/dot.vim/plugin/vcscommand.vim \
  vim/dot.vim/plugin/vcscvs.vim \
  vim/dot.vim/plugin/vcssvn.vim \
  vim/dot.vim/syntax/bugs.vim \
  vim/dot.vim/syntax/CVSAnnotate.vim \
  vim/dot.vim/syntax/issue.vim \
  vim/dot.vim/syntax/rest.vim \
  vim/dot.vim/syntax/SVNAnnotate.vim \
  vim/dot.vim/syntax/vcscommit.vim \
  vim/dot.vimrc
GROUP_VIM_RULE=$(patsubst vim/dot.%,$(HOME)/.%,$(1))
GROUP_VIM_DOC_FILES=\
  vim/dot.vim/doc/scratch.txt \
  vim/dot.vim/doc/surround.txt \
  vim/dot.vim/doc/tofunc.txt \
  vim/dot.vim/doc/vcscommand.txt
GROUP_VIM_POST_TARGETS=vim-update-local-helptags
vim-update-local-helptags: $(DESTDIR)$(HOME)/.vim/doc/tags
$(DESTDIR)$(HOME)/.vim/doc/tags: $(GROUP_VIM_DOC_FILES)
	vim -n -N -u NONE -U NONE -e -c 'helptags $(dir $@) | q'

GROUP_SAMURIZE_FILES=\
  samurize/my-conf.ini
GROUP_SAMURIZE_RULE=$(patsubst samurize/%,/usr/win/bin/Samurize/Configs/%,$(1))




# Package definitions  #{{{1
ALL_PACKAGES=vim-all vim-scratch vim-tofunc

PACKAGE_vim_all_ARCHIVE=vim-all
PACKAGE_vim_all_BASE=vim
PACKAGE_vim_all_FILES=\
  $(wildcard \
    vim/dot.vimrc \
    vim/dot.vim/colors/*.vim \
    vim/dot.vim/doc/*.txt \
    vim/dot.vim/ftplugin/*.vim \
    vim/dot.vim/plugin/*.vim \
    vim/dot.vim/syntax/*.vim \
   )

PACKAGE_vim_scratch_ARCHIVE=vim-scratch-0.0
PACKAGE_vim_scratch_BASE=vim/dot.vim
PACKAGE_vim_scratch_FILES=\
  vim/dot.vim/doc/scratch.txt \
  vim/dot.vim/plugin/scratch.vim

PACKAGE_vim_tofunc_ARCHIVE=vim-tofunc-0.0
PACKAGE_vim_tofunc_BASE=vim/dot.vim
PACKAGE_vim_tofunc_FILES=\
  vim/dot.vim/doc/tofunc.txt \
  vim/dot.vim/ftplugin/c_tofunc.vim \
  vim/dot.vim/ftplugin/vim_tofunc.vim \
  vim/dot.vim/plugin/tofunc.vim




# package  #{{{1

PACKAGE_NAME=# Set from command line
package:
	if [ -z '$(filter $(PACKAGE_NAME),$(ALL_PACKAGES))' ]; then \
	  echo 'Error: Invalid PACKAGE_NAME "$(PACKAGE_NAME)".'; \
	  false; \
	fi
	$(MAKE) 'package=$(subst -,_,$(PACKAGE_NAME))' _package
_package:
	ln -s $(PACKAGE_$(package)_BASE) $(PACKAGE_$(package)_ARCHIVE)
	tar jcvf $(PACKAGE_$(package)_ARCHIVE).tar.bz2 \
	         $(foreach file, \
	                   $(PACKAGE_$(package)_FILES), \
	                   $(patsubst $(PACKAGE_$(package)_BASE)/%, \
	                              $(PACKAGE_$(package)_ARCHIVE)/%, \
	                              $(file)))
	rm $(PACKAGE_$(package)_ARCHIVE)




# update  #{{{1
# Rules for `update' are generated by eval.

UPDATE_DIR=mkdir -p
UPDATE_FILE=cp

RemoveCurrentDirectory=$(filter-out ./,$(1))
RemoveDuplicates=$(sort $(1))
CallRule=$(call RemoveCurrentDirectory,$(call GROUP_$(1)_RULE,$(2)))

define GenerateRulesToUpdateFile  # (src, dest)
update: $(DESTDIR)$(2)
$(DESTDIR)$(2): $(1)
	$(UPDATE_FILE) '$$<' '$$@'

endef

define GenerateRulesToUpdateDirectory  # (dest)
update: $(DESTDIR)$(1)
$(DESTDIR)$(1):
	$(UPDATE_DIR) '$$@'

endef

define GenerateRulesFromGroups  # (groups = (group_name*))
$(foreach directory, \
  $(call RemoveDuplicates, \
    $(foreach group, \
      $(1), \
      $(dir $(call CallRule,$(group),$(GROUP_$(group)_FILES))))), \
  $(call GenerateRulesToUpdateDirectory,$(directory)))
$(foreach group, \
  $(1), \
  $(foreach file, \
    $(GROUP_$(group)_FILES), \
    $(call GenerateRulesToUpdateFile,$(file),$(call CallRule,$(group),$(file)))))
update .PHONY: $(foreach group,$(1),$(GROUP_$(group)_POST_TARGETS))
endef

$(eval $(call GenerateRulesFromGroups,$(ALL_GROUPS)))




# clean  #{{{1

clean:
	rm -rf `find -name '*~' -or -name ',*'`




# __END__
# vim: foldmethod=marker
