" Test: vim-fakeclip pseudo-screen
runtime! plugin/fakeclip.vim
call vspec#hint({
\   'scope': 'fakeclip#_local_variables()',
\   'sid': 'fakeclip#_sid_prefix()',
\ })
function! s:write(...)  "{{{1
  let _ = tempname()
  call writefile(a:000, _, 'b')
  call system('screen -X readbuf ' . shellescape(_))
  call delete(_)
endfunction




function s:describe__s_read_screen()  "{{{1
  It should read the paste buffer which contains empty string

  call s:write('')
  Should Call('s:read_screen') ==# ''
  Should Call('s:read_screen') ==# ''

  It should read the paste buffer which contains string without newline

  call s:write('A')
  Should Call('s:read_screen') ==# 'A'
  Should Call('s:read_screen') ==# 'A'

  It should read the paste buffer which contains single-line string

  call s:write('B', '')
  Should Call('s:read_screen') ==# "B\n"
  Should Call('s:read_screen') ==# "B\n"

  It should read the paste buffer which contains multi-line string

  call s:write('C', 'D', '')
  Should Call('s:read_screen') ==# "C\nD\n"
  Should Call('s:read_screen') ==# "C\nD\n"

  It should read the paste buffer which contains multi-line string w/o last LF

  call s:write('E', 'F')
  Should Call('s:read_screen') ==# "E\nF"
  Should Call('s:read_screen') ==# "E\nF"
endfunction




function s:describe__s_write_screen()  "{{{1
  It should succeed

  call Call('s:write_screen', '')
  Should Call('s:read_screen') ==# ''

  call Call('s:write_screen', 'A')
  Should Call('s:read_screen') ==# 'A'

  call Call('s:write_screen', "B\n")
  Should Call('s:read_screen') ==# "B\n"

  call Call('s:write_screen', "C\nD\n")
  Should Call('s:read_screen') ==# "C\nD\n"

  call Call('s:write_screen', "E\nF")
  Should Call('s:read_screen') ==# "E\nF"
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
