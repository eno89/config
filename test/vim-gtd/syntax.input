" Tests for vim-gtd / syntax
" Initial setup  "{{{1

filetype plugin on
syntax enable

function! TestSynstack(lnum, col)
  return map(synstack(a:lnum, a:col), 'synIDattr(v:val, "name")')
endfunction




function s:test_syntax_1()  "{{{1
  Title "INITIAL STATE"

  tabnew
  tabonly!
  setfiletype gtd

  Assert getline(1, '$') ==> [
  \ 'INBOX',
  \ 'NEXT ACTIONS',
  \ 'CALENDAR',
  \ 'PROJECTS',
  \ 'WAITING FOR',
  \ 'SOMEDAY',
  \ 'ARCHIVE',
  \ 'TRASH',
  \ '; vim: filetype=gtd'
  \ ]

  Assert TestSynstack(1, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(2, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(3, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(4, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(5, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(6, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(7, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(8, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(9, 1) ==> ['gtdComment']
endfunction




function s:test_syntax_2()  "{{{1
  Title "TYPICAL CONTENT"

  tabnew
  tabonly!
  setfiletype gtd

  % delete _
  let texts = [
  \ 'INBOX',
  \ '#1 t: e: s: t: title',
  \ "\t2009-08-18T23:58:44",
  \ "\t\there i go (Anthem mix)",
  \ '#2 t: e: s: t: title',
  \ "\t2009-08-18T23:58:44",
  \ "\t\tNEXT STAY (DJ Noriken Remix)",
  \ 'NEXT ACTIONS',
  \ 'CALENDAR',
  \ '#3 t: e: s: t: title',
  \ "\t2009-08-18T23:58:44",
  \ "\t\tJump!",
  \ 'PROJECTS',
  \ 'WAITING FOR',
  \ 'SOMEDAY',
  \ 'ARCHIVE',
  \ 'TRASH',
  \ '; vim: filetype=gtd'
  \ ]
  for i in texts
    put =i
  endfor
  1 delete _

  Assert getline(1, '$') ==> texts

  Assert TestSynstack(1, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(2, 1) ==> ['gtdSection', 'gtdIssue',
  \ 'gtdIssueTitle', 'gtdIssueId']
  Assert TestSynstack(3, 1) ==> ['gtdSection', 'gtdIssue']
  Assert TestSynstack(4, 1) ==> ['gtdSection', 'gtdIssue']
  Assert TestSynstack(5, 1) ==> ['gtdSection', 'gtdIssue',
  \ 'gtdIssueTitle', 'gtdIssueId']
  Assert TestSynstack(6, 1) ==> ['gtdSection', 'gtdIssue']
  Assert TestSynstack(7, 1) ==> ['gtdSection', 'gtdIssue']
  Assert TestSynstack(8, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(9, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(10, 1) ==> ['gtdSection', 'gtdIssue',
  \ 'gtdIssueTitle', 'gtdIssueId']
  Assert TestSynstack(10, 1) ==> ['gtdSection', 'gtdIssue']
  Assert TestSynstack(11, 1) ==> ['gtdSection', 'gtdIssue']
  Assert TestSynstack(13, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(14, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(15, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(16, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(17, 1) ==> ['gtdSection', 'gtdSectionTitle']
  Assert TestSynstack(18, 1) ==> ['gtdComment']

  Assert TestSynstack(2, 3)
  \ ==> ['gtdSection', 'gtdIssue', 'gtdIssueTitle']
  Assert TestSynstack(2, 4)
  \ ==> ['gtdSection', 'gtdIssue', 'gtdIssueTitle', 'gtdIssueTag']
  Assert TestSynstack(2, 5)
  \ ==> ['gtdSection', 'gtdIssue', 'gtdIssueTitle', 'gtdIssueTag']
  Assert TestSynstack(2, 6)
  \ ==> ['gtdSection', 'gtdIssue', 'gtdIssueTitle']
  Assert TestSynstack(2, 15)
  \ ==> ['gtdSection', 'gtdIssue', 'gtdIssueTitle']
  Assert TestSynstack(2, 16)
  \ ==> ['gtdSection', 'gtdIssue', 'gtdIssueTitle']

  Assert TestSynstack(3, 2)
  \ ==> ['gtdSection', 'gtdIssue', 'gtdNoteDatetime']
endfunction




Test  "{{{1

" __END__
" vim: filetype=vim foldmethod=marker
