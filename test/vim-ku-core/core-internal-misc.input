" Test: vim-ku-core core-internal-misc
runtime! plugin/ku.vim plugin/ku/kind/common.vim
call vspec#hint({'scope': 'ku#_local_variables()', 'sid': 'ku#_sid_prefix()'})
function s:describe__ku_default_on_action()  "{{{1
  It should return a given argument as-is

  let candidate = {'word': 'MAKINA'}
  Should ku#default_on_action(candidate) is candidate
endfunction




function s:describe__ku_default_valid_for_acc_p()  "{{{1
  It should true for anything

  Should ku#default_valid_for_acc_p(0) != 0
  Should ku#default_valid_for_acc_p('') != 0
  Should ku#default_valid_for_acc_p({'word': 'Quartett!'}) != 0
endfunction




function s:describe__s_acc_text()  "{{{1
  function! False(...)
    return 0
  endfunction
  let source = {'valid_for_acc_p': function('ku#default_valid_for_acc_p')}
  let source_f = {'valid_for_acc_p': function('False')}

  let cs1 = [{'word': 'usr/share/man/man1', 'ku__source': source}]
  let cs2 = [
  \   {'word': 'usr/share/w y 1', 'ku__source': source},
  \   {'word': 'usr/share/ x z2', 'ku__source': source},
  \   {'word': 'usr/share/w y 3', 'ku__source': source},
  \   {'word': 'usr/share/ x z4', 'ku__source': source},
  \ ]
  let cs3 = [
  \   {'word': 'bin/1/1', 'ku__source': source},
  \   {'word': 'etc/2/2', 'ku__source': source},
  \   {'word': 'usr/3/3', 'ku__source': source},
  \   {'word': 'var/4/4', 'ku__source': source},
  \ ]
  let cs4 = [
  \   {'word': '1/X', 'ku__source': source_f},
  \   {'word': '2/X', 'ku__source': source_f},
  \   {'word': '3/X', 'ku__source': source},
  \   {'word': '4/X', 'ku__source': source_f},
  \ ]

  It should complete valid text with len(line_components) == 2

  Should Call('s:acc_text', Ref('s:PROMPT').'u/', cs1) ==# 'usr'

  Should Call('s:acc_text', '/', cs1) ==# 'usr'
  Should Call('s:acc_text', 'u/', cs1) ==# 'usr'
  Should Call('s:acc_text', 's/', cs1) ==# 'usr'
  Should Call('s:acc_text', 'sh/', cs1) ==# 'usr/share'
  Should Call('s:acc_text', 'm/', cs1) ==# 'usr/share/man'
  Should Call('s:acc_text', '1/', cs1) ==# 'usr/share/man/man1'

  It should complete valid text with 3 <= len(line_components)

  Should Call('s:acc_text', 'usr//', cs1) ==# 'usr/share'
  Should Call('s:acc_text', 'usr/s/', cs1) ==# 'usr/share'
  Should Call('s:acc_text', 'usr/sh/', cs1) ==# 'usr/share'
  Should Call('s:acc_text', 'usr/m/', cs1) ==# 'usr/share/man'
  Should Call('s:acc_text', 'usr/1/', cs1) ==# 'usr/share/man/man1'
  Should Call('s:acc_text', 'usr/share/', cs1) ==# 'usr/share'

  Should Call('s:acc_text', 'usr/share//', cs1) ==# 'usr/share/man'
  Should Call('s:acc_text', 'usr/share/m/', cs1) ==# 'usr/share/man'
  Should Call('s:acc_text', 'usr/share/1/', cs1) ==# 'usr/share/man/man1'

  It should complete the candidate with minimum index if many candidates match

  Should Call('s:acc_text', 'w/', cs2) ==# 'usr/share/w y 1'
  Should Call('s:acc_text', 'x/', cs2) ==# 'usr/share/ x z2'
  Should Call('s:acc_text', 'y/', cs2) ==# 'usr/share/w y 1'
  Should Call('s:acc_text', 'z/', cs2) ==# 'usr/share/ x z2'

  It should complete a candidate which is valid_for_acc_p

  Should Call('s:acc_text', 'X/', cs4) == '3/X'

  It should return '' if there is no proper candidate for a:line

  Should Call('s:acc_text', 'x/', []) ==# ''
  Should Call('s:acc_text', 'x/', cs1) ==# ''
  Should Call('s:acc_text', '2/', cs1) ==# ''
  Should Call('s:acc_text', 'u/s/m/', cs1) ==# ''

  Should Call('s:acc_text', 'USR//', cs1) ==# ''

  It should fail if a:line doesn't have two or more components

  Should Call('s:acc_text', '', []) == ''

  let v:errmsg = ''
  silent! let _ = Call('s:acc_text', '', cs1)
  Should v:errmsg =~# '^ku:e2:'
  Should _ == ''

  It should ignore candidates which doesn't match to the prefix components

  Should Call('s:acc_text', 'etc//', cs3) == 'etc/2'
  Should Call('s:acc_text', 'var//', cs3) == 'var/4'

  It should ignore candidates which doesn't match to the incomplete component

  Should Call('s:acc_text', 'b/', cs3) == 'bin'
  Should Call('s:acc_text', 'e/', cs3) == 'etc'
  Should Call('s:acc_text', 'r/', cs3) == 'usr'
  Should Call('s:acc_text', 'u/', cs3) == 'usr'
  Should Call('s:acc_text', 'v/', cs3) == 'var'
endfunction




function s:describe__s_compare_ignorecase()  "{{{1
  It should return 0 for same characters with the same case

  Should Call('s:compare_ignorecase', 'A', 'A') == 0
  Should Call('s:compare_ignorecase', 'a', 'a') == 0

  It should return non 0 for same characters with different cases

  Should Call('s:compare_ignorecase', 'A', 'a') < 0
  Should Call('s:compare_ignorecase', 'a', 'A') > 0

  It should return non 0 for different characters with the same case

  Should Call('s:compare_ignorecase', 'A', 'B') < 0
  Should Call('s:compare_ignorecase', 'B', 'A') > 0

  It should return non 0 for different characters with different cases

  Should Call('s:compare_ignorecase', 'A', 'b') < 0
  Should Call('s:compare_ignorecase', 'a', 'B') < 0
  Should Call('s:compare_ignorecase', 'B', 'a') > 0
  Should Call('s:compare_ignorecase', 'b', 'A') > 0
endfunction




function s:describe__s_complete_the_prompt()  "{{{1
  It should complete the prompt for the current line

  call setline('.', 'Roots26')
  Should getline('.') ==# 'Roots26'

  call Call('s:complete_the_prompt')
  Should getline('.') ==# Ref('s:PROMPT') . 'Roots26'

  call Call('s:complete_the_prompt')
  Should getline('.') ==# Ref('s:PROMPT') . Ref('s:PROMPT') . 'Roots26'

  It requires to reset side effect

  bwipeout!
  Should getline('.') ==# ''
endfunction




function s:describe__s_consume_typeahead_buffer()  "{{{1
  It requires that there is no character in the typeahead buffer

  Should getchar(0) is 0

  It should consume all characters in the typeahead buffer

  Should Call('s:consume_typeahead_buffer') ==# ''

  call feedkeys('So Fabulous!!', 't')
  Should Call('s:consume_typeahead_buffer') ==# 'So Fabulous!!'
endfunction




function s:describe__s_contains_the_prompt_p()  "{{{1
  It should return true if the current line contains the prompt

  Should Call('s:contains_the_prompt_p', Ref('s:PROMPT')) == 1
  Should Call('s:contains_the_prompt_p', Ref('s:PROMPT') . 'Roots26') == 1

  It should false true if the current line doesn't contain the prompt

  Should Call('s:contains_the_prompt_p', '') == 0
  Should Call('s:contains_the_prompt_p', 'Roots26') == 0
endfunction




function s:describe__s_initialize_ku_buffer__with_users_init_autocmd()  "{{{1
  augroup test
    autocmd FileType ku  echo '" autocmd FileType ku'
  augroup END

  call Call('s:initialize_ku_buffer')

  It should set basic optoins

  Should &l:bufhidden ==# 'hide'
  Should &l:buflisted == 0
  Should &l:buftype ==# 'nofile'
  Should &l:omnifunc ==# 'ku#omnifunc'
  Should &l:swapfile == 0
  Should bufname('') ==# Ref('s:KU_BUFFER_NAME')

  It should define several autocommands for the current buffer

  Should exists('#plugin-ku#BufLeave#<buffer>') == 1
  Should exists('#plugin-ku#CursorMovedI#<buffer>') == 1
  Should exists('#plugin-ku#InsertEnter#<buffer>') == 1
  Should exists('#plugin-ku#TabLeave#<buffer>') == 0
  Should exists('#plugin-ku#WinLeave#<buffer>') == 1

  It should define several named key mappings for the current buffer

  Should maparg('<Plug>(ku-choose-action)', 'i') != ''
  Should maparg('<Plug>(ku-choose-action)', 'n') != ''
  Should maparg('<Plug>(ku-delete-backward-char)', 'i') != ''
  Should maparg('<Plug>(ku-do-default-action)', 'i') != ''
  Should maparg('<Plug>(ku-do-default-action)', 'n') != ''
  Should maparg('<Plug>(ku-quit-session)', 'i') != ''
  Should maparg('<Plug>(ku-quit-session)', 'n') != ''

  It should not define any ui key mapping for the current buffer

  Should maparg('<BS>', 'i') ==# ''
  Should maparg('<C-c>', 'i') ==# ''
  Should maparg('<C-c>', 'n') ==# ''
  Should maparg('<C-h>', 'i') ==# ''
  Should maparg('<C-i>', 'i') ==# ''
  Should maparg('<C-i>', 'n') ==# ''
  Should maparg('<C-m>', 'i') ==# ''
  Should maparg('<C-m>', 'n') ==# ''
  Should maparg('<Enter>', 'i') ==# ''
  Should maparg('<Enter>', 'n') ==# ''
  Should maparg('<Return>', 'i') ==# ''
  Should maparg('<Return>', 'n') ==# ''
  Should maparg('<Tab>', 'i') ==# ''
  Should maparg('<Tab>', 'n') ==# ''

  It should affect only the current buffer when it is called

  noautocmd bwipeout!  " s:quit_session() is harmful for this test

  Should &l:bufhidden ==# ''
  Should &l:buflisted == 1
  Should &l:buftype ==# ''
  Should &l:omnifunc ==# ''
  Should &l:swapfile == 1
  Should bufname('') ==# ''

  Should exists('#plugin-ku#BufLeave#<buffer>') == 0
  Should exists('#plugin-ku#CursorMovedI#<buffer>') == 0
  Should exists('#plugin-ku#InsertEnter#<buffer>') == 0
  Should exists('#plugin-ku#TabLeave#<buffer>') == 0
  Should exists('#plugin-ku#WinLeave#<buffer>') == 0

  Should maparg('<Plug>(ku-choose-action)', 'i') ==# ''
  Should maparg('<Plug>(ku-choose-action)', 'n') ==# ''
  Should maparg('<Plug>(ku-delete-backward-char)', 'i') ==# ''
  Should maparg('<Plug>(ku-do-default-action)', 'i') ==# ''
  Should maparg('<Plug>(ku-do-default-action)', 'n') ==# ''
  Should maparg('<Plug>(ku-quit-session)', 'i') ==# ''
  Should maparg('<Plug>(ku-quit-session)', 'n') ==# ''

  Should maparg('<BS>', 'i') ==# ''
  Should maparg('<C-c>', 'i') ==# ''
  Should maparg('<C-c>', 'n') ==# ''
  Should maparg('<C-h>', 'i') ==# ''
  Should maparg('<C-i>', 'i') ==# ''
  Should maparg('<C-i>', 'n') ==# ''
  Should maparg('<C-m>', 'i') ==# ''
  Should maparg('<C-m>', 'n') ==# ''
  Should maparg('<Enter>', 'i') ==# ''
  Should maparg('<Enter>', 'n') ==# ''
  Should maparg('<Return>', 'i') ==# ''
  Should maparg('<Return>', 'n') ==# ''
  Should maparg('<Tab>', 'i') ==# ''
  Should maparg('<Tab>', 'n') ==# ''

  " Reset side effect.
  augroup test
    autocmd! FileType ku
  augroup END
endfunction




function s:describe__s_initialize_ku_buffer__with_users_init_ftplugin() "{{{1
  let b:did_ftplugin = 'ku'  " trick the core as if there is a ftplugin

  call Call('s:initialize_ku_buffer')

  It should set basic optoins

  Should &l:bufhidden ==# 'hide'
  Should &l:buflisted == 0
  Should &l:buftype ==# 'nofile'
  Should &l:omnifunc ==# 'ku#omnifunc'
  Should &l:swapfile == 0
  Should bufname('') ==# Ref('s:KU_BUFFER_NAME')

  It should define several autocommands for the current buffer

  Should exists('#plugin-ku#BufLeave#<buffer>') == 1
  Should exists('#plugin-ku#CursorMovedI#<buffer>') == 1
  Should exists('#plugin-ku#InsertEnter#<buffer>') == 1
  Should exists('#plugin-ku#TabLeave#<buffer>') == 0
  Should exists('#plugin-ku#WinLeave#<buffer>') == 1

  It should define several named key mappings for the current buffer

  Should maparg('<Plug>(ku-choose-action)', 'i') !=# ''
  Should maparg('<Plug>(ku-choose-action)', 'n') !=# ''
  Should maparg('<Plug>(ku-delete-backward-char)', 'i') !=# ''
  Should maparg('<Plug>(ku-do-default-action)', 'i') !=# ''
  Should maparg('<Plug>(ku-do-default-action)', 'n') !=# ''
  Should maparg('<Plug>(ku-quit-session)', 'i') !=# ''
  Should maparg('<Plug>(ku-quit-session)', 'n') !=# ''

  It should not define any ui key mapping for the current buffer

  Should maparg('<BS>', 'i') ==# ''
  Should maparg('<C-c>', 'i') ==# ''
  Should maparg('<C-c>', 'n') ==# ''
  Should maparg('<C-h>', 'i') ==# ''
  Should maparg('<C-i>', 'i') ==# ''
  Should maparg('<C-i>', 'n') ==# ''
  Should maparg('<C-m>', 'i') ==# ''
  Should maparg('<C-m>', 'n') ==# ''
  Should maparg('<Enter>', 'i') ==# ''
  Should maparg('<Enter>', 'n') ==# ''
  Should maparg('<Return>', 'i') ==# ''
  Should maparg('<Return>', 'n') ==# ''
  Should maparg('<Tab>', 'i') ==# ''
  Should maparg('<Tab>', 'n') ==# ''

  It should affect only the current buffer when it is called

  noautocmd bwipeout!  " s:quit_session() is harmful for this test

  Should &l:bufhidden ==# ''
  Should &l:buflisted == 1
  Should &l:buftype ==# ''
  Should &l:omnifunc ==# ''
  Should &l:swapfile == 1
  Should bufname('') ==# ''

  Should exists('#plugin-ku#BufLeave#<buffer>') == 0
  Should exists('#plugin-ku#CursorMovedI#<buffer>') == 0
  Should exists('#plugin-ku#InsertEnter#<buffer>') == 0
  Should exists('#plugin-ku#TabLeave#<buffer>') == 0
  Should exists('#plugin-ku#WinLeave#<buffer>') == 0

  Should maparg('<Plug>(ku-choose-action)', 'i') ==# ''
  Should maparg('<Plug>(ku-choose-action)', 'n') ==# ''
  Should maparg('<Plug>(ku-delete-backward-char)', 'i') ==# ''
  Should maparg('<Plug>(ku-do-default-action)', 'i') ==# ''
  Should maparg('<Plug>(ku-do-default-action)', 'n') ==# ''
  Should maparg('<Plug>(ku-quit-session)', 'i') ==# ''
  Should maparg('<Plug>(ku-quit-session)', 'n') ==# ''

  Should maparg('<BS>', 'i') ==# ''
  Should maparg('<C-c>', 'i') ==# ''
  Should maparg('<C-c>', 'n') ==# ''
  Should maparg('<C-h>', 'i') ==# ''
  Should maparg('<C-i>', 'i') ==# ''
  Should maparg('<C-i>', 'n') ==# ''
  Should maparg('<C-m>', 'i') ==# ''
  Should maparg('<C-m>', 'n') ==# ''
  Should maparg('<Enter>', 'i') ==# ''
  Should maparg('<Enter>', 'n') ==# ''
  Should maparg('<Return>', 'i') ==# ''
  Should maparg('<Return>', 'n') ==# ''
  Should maparg('<Tab>', 'i') ==# ''
  Should maparg('<Tab>', 'n') ==# ''

  " No side effect to reset.
endfunction




function s:describe__s_initialize_ku_buffer__without_users_settings()  "{{{1
  call Call('s:initialize_ku_buffer')

  It should set basic optoins

  Should &l:bufhidden ==# 'hide'
  Should &l:buflisted == 0
  Should &l:buftype ==# 'nofile'
  Should &l:omnifunc ==# 'ku#omnifunc'
  Should &l:swapfile == 0
  Should bufname('') ==# Ref('s:KU_BUFFER_NAME')

  It should define several autocommands for the current buffer

  Should exists('#plugin-ku#BufLeave#<buffer>') == 1
  Should exists('#plugin-ku#CursorMovedI#<buffer>') == 1
  Should exists('#plugin-ku#InsertEnter#<buffer>') == 1
  Should exists('#plugin-ku#TabLeave#<buffer>') == 0
  Should exists('#plugin-ku#WinLeave#<buffer>') == 1

  It should define several named key mappings for the current buffer

  Should maparg('<Plug>(ku-choose-action)', 'i') !=# ''
  Should maparg('<Plug>(ku-choose-action)', 'n') !=# ''
  Should maparg('<Plug>(ku-delete-backward-char)', 'i') !=# ''
  Should maparg('<Plug>(ku-do-default-action)', 'i') !=# ''
  Should maparg('<Plug>(ku-do-default-action)', 'n') !=# ''
  Should maparg('<Plug>(ku-quit-session)', 'i') !=# ''
  Should maparg('<Plug>(ku-quit-session)', 'n') !=# ''

  It should define several ui key mappings for the current buffer

  Should maparg('<BS>', 'i') ==# '<Plug>(ku-delete-backward-char)'
  Should maparg('<C-c>', 'i') ==# '<Plug>(ku-quit-session)'
  Should maparg('<C-c>', 'n') ==# '<Plug>(ku-quit-session)'
  Should maparg('<C-h>', 'i') ==# '<Plug>(ku-delete-backward-char)'
  Should maparg('<C-i>', 'i') ==# '<Plug>(ku-choose-action)'
  Should maparg('<C-i>', 'n') ==# '<Plug>(ku-choose-action)'
  Should maparg('<C-m>', 'i') ==# '<Plug>(ku-do-default-action)'
  Should maparg('<C-m>', 'n') ==# '<Plug>(ku-do-default-action)'
  Should maparg('<Enter>', 'i') ==# '<Plug>(ku-do-default-action)'
  Should maparg('<Enter>', 'n') ==# '<Plug>(ku-do-default-action)'
  Should maparg('<Return>', 'i') ==# '<Plug>(ku-do-default-action)'
  Should maparg('<Return>', 'n') ==# '<Plug>(ku-do-default-action)'
  Should maparg('<Tab>', 'i') ==# '<Plug>(ku-choose-action)'
  Should maparg('<Tab>', 'n') ==# '<Plug>(ku-choose-action)'

  It should affect only the current buffer when it is called

  noautocmd bwipeout!  " s:quit_session() is harmful for this test

  Should &l:bufhidden ==# ''
  Should &l:buflisted == 1
  Should &l:buftype ==# ''
  Should &l:omnifunc ==# ''
  Should &l:swapfile == 1
  Should bufname('') ==# ''

  Should exists('#plugin-ku#BufLeave#<buffer>') == 0
  Should exists('#plugin-ku#CursorMovedI#<buffer>') == 0
  Should exists('#plugin-ku#InsertEnter#<buffer>') == 0
  Should exists('#plugin-ku#TabLeave#<buffer>') == 0
  Should exists('#plugin-ku#WinLeave#<buffer>') == 0

  Should maparg('<Plug>(ku-choose-action)', 'i') ==# ''
  Should maparg('<Plug>(ku-choose-action)', 'n') ==# ''
  Should maparg('<Plug>(ku-delete-backward-char)', 'i') ==# ''
  Should maparg('<Plug>(ku-do-default-action)', 'i') ==# ''
  Should maparg('<Plug>(ku-do-default-action)', 'n') ==# ''
  Should maparg('<Plug>(ku-quit-session)', 'i') ==# ''
  Should maparg('<Plug>(ku-quit-session)', 'n') ==# ''

  Should maparg('<BS>', 'i') ==# ''
  Should maparg('<C-c>', 'i') ==# ''
  Should maparg('<C-c>', 'n') ==# ''
  Should maparg('<C-h>', 'i') ==# ''
  Should maparg('<C-i>', 'i') ==# ''
  Should maparg('<C-i>', 'n') ==# ''
  Should maparg('<C-m>', 'i') ==# ''
  Should maparg('<C-m>', 'n') ==# ''
  Should maparg('<Enter>', 'i') ==# ''
  Should maparg('<Enter>', 'n') ==# ''
  Should maparg('<Return>', 'i') ==# ''
  Should maparg('<Return>', 'n') ==# ''
  Should maparg('<Tab>', 'i') ==# ''
  Should maparg('<Tab>', 'n') ==# ''

  " No side effect to reset.
endfunction




function s:describe__s_kinds_from_kind_names()  "{{{1
  It requires the following initialization

  let kind_a = {
  \   'default_action_table': {},
  \   'default_key_table': {},
  \   'name': 'a',
  \ }
  let kind_b = {
  \   'default_action_table': {},
  \   'default_key_table': {},
  \   'name': 'b',
  \ }
  let kind_c = {
  \   'default_action_table': {},
  \   'default_key_table': {},
  \   'name': 'c',
  \ }

  Should ku#define_kind(kind_a) != 0
  Should ku#define_kind(kind_b) != 0
  Should ku#define_kind(kind_c) != 0

  It should succeed

  Should Call('s:kinds_from_kind_names', [])
  \ ==# []
  Should Call('s:kinds_from_kind_names', ['a'])
  \ ==# [kind_a]
  Should Call('s:kinds_from_kind_names', ['a', 'b'])
  \ ==# [kind_a, kind_b]
  Should Call('s:kinds_from_kind_names', ['a', 'b', 'c'])
  \ ==# [kind_a, kind_b, kind_c]

  It should not modify a given list in-place

  let kind_names = ['a', 'b', 'c']
  let kinds = Call('s:kinds_from_kind_names', kind_names)

  Should kinds ==# [kind_a, kind_b, kind_c]
  Should kinds isnot# kind_names

  It requires to reset side effect

  ResetContext
endfunction




function s:describe__s_ku_active_p()  "{{{1
  It should return false for the initial state

  Should Call('s:ku_active_p') == 0

  It should return true after starting a ku session

  Should ku#start() == 1
  Should nr2char(getchar(0)) ==# 'A'
  Should nr2char(getchar(0)) ==# ''

  Should Call('s:ku_active_p') == 1

  It should return false after quitting a ku session

  close

  Should Call('s:ku_active_p') == 0

  " Reset side effect.
  call ku#start()
  Should nr2char(getchar(0)) ==# 'A'
  Should nr2char(getchar(0)) ==# ''
  bwipeout!
endfunction




function s:describe__s_make_skip_regexp()  "{{{1
  It should return a valid value for normal text

  Should Call('s:make_skip_regexp', '') ==# '\V'
  Should Call('s:make_skip_regexp', 'a') ==# '\Va'
  Should Call('s:make_skip_regexp', 'ab') ==# '\Va\.\{-}b'
  Should Call('s:make_skip_regexp', 'abc') ==# '\Va\.\{-}b\.\{-}c'

  Should match('a', Call('s:make_skip_regexp', 'abc')) == -1

  Should match('abc', Call('s:make_skip_regexp', 'abc')) == 0
  Should match('__abc', Call('s:make_skip_regexp', 'abc')) == 2
  Should match('a__bc', Call('s:make_skip_regexp', 'abc')) == 0
  Should match('ab__c', Call('s:make_skip_regexp', 'abc')) == 0
  Should match('abc__', Call('s:make_skip_regexp', 'abc')) == 0
  Should match('__a__b__c__', Call('s:make_skip_regexp', 'abc')) == 2

  It should return a valid value for text with backslashes

  Should Call('s:make_skip_regexp', '\') ==# '\V\\'
  Should Call('s:make_skip_regexp', '\a') ==# '\V\\\.\{-}a'
  Should Call('s:make_skip_regexp', 'a\b') ==# '\Va\.\{-}\\\.\{-}b'
  Should Call('s:make_skip_regexp', 'abc\') ==# '\Va\.\{-}b\.\{-}c\.\{-}\\'

  Should match('a', Call('s:make_skip_regexp', 'ab\')) == -1

  Should match('ab\', Call('s:make_skip_regexp', 'ab\')) == 0
  Should match('__ab\', Call('s:make_skip_regexp', 'ab\')) == 2
  Should match('a__b\', Call('s:make_skip_regexp', 'ab\')) == 0
  Should match('ab__\', Call('s:make_skip_regexp', 'ab\')) == 0
  Should match('ab\__', Call('s:make_skip_regexp', 'ab\')) == 0
  Should match('__a__b__\__', Call('s:make_skip_regexp', 'ab\')) == 2

  It should return a valid value for text with wired charcters

  Should Call('s:make_skip_regexp', '\!/') ==# '\V\\\.\{-}!\.\{-}/'
  Should Call('s:make_skip_regexp', '/i\') ==# '\V/\.\{-}i\.\{-}\\'
  Should Call('s:make_skip_regexp', '!@#$') ==# '\V!\.\{-}@\.\{-}#\.\{-}$'

  Should match('a', Call('s:make_skip_regexp', '/i\')) == -1

  Should match('/i\', Call('s:make_skip_regexp', '/i\')) == 0
  Should match('__/i\', Call('s:make_skip_regexp', '/i\')) == 2
  Should match('/__i\', Call('s:make_skip_regexp', '/i\')) == 0
  Should match('/i__\', Call('s:make_skip_regexp', '/i\')) == 0
  Should match('/i\__', Call('s:make_skip_regexp', '/i\')) == 0
  Should match('__/__i__\__', Call('s:make_skip_regexp', '/i\')) == 2
endfunction




function s:describe__s_new_session()  "{{{1
  let F = function('function')
  let G = function('type')
  let original_completeopt = &completeopt
  let original_curwinnr = winnr()
  let original_winrestcmd = winrestcmd()

  Should ku#define_source({'gather_candidates': F, 'name': 'abc'}) == 1
  Should ku#define_source({'gather_candidates': G, 'name': 'test'}) == 1
  Should ku#available_source_p('abc') == 1
  Should ku#available_source_p('test') == 1

  It should return a valid object without source (A)

  let session_a = Call('s:new_session', [])
  Should has_key(session_a, 'id') == 1
  Should session_a.inserted_by_acc_p == 0
  Should session_a.last_column == Ref('s:INVALID_COLUMN')
  Should session_a.last_lcandidates ==# []
  Should session_a.last_pattern_raw == ''
  Should session_a.now_quitting_p == 0
  Should session_a.original_completeopt ==# original_completeopt
  Should session_a.original_curwinnr == original_curwinnr
  Should session_a.original_winrestcmd ==# original_winrestcmd
  Should session_a.sources ==# []

  It should return a valid objec without source (B)

  let session_b = Call('s:new_session', [])
  Should has_key(session_b, 'id') == 1
  Should session_b.inserted_by_acc_p == 0
  Should session_b.last_column == Ref('s:INVALID_COLUMN')
  Should session_b.last_lcandidates ==# []
  Should session_b.last_pattern_raw == ''
  Should session_b.now_quitting_p == 0
  Should session_b.original_completeopt ==# original_completeopt
  Should session_b.original_curwinnr == original_curwinnr
  Should session_b.original_winrestcmd ==# original_winrestcmd
  Should session_b.sources ==# []

  It should return sessions with different session ids

  Should session_b.id isnot session_a.id

  It should return a valid object with some sources

  let session = Call('s:new_session', ['test', 'abc'])
  Should has_key(session, 'id') == 1
  Should session.inserted_by_acc_p == 0
  Should session.last_column == Ref('s:INVALID_COLUMN')
  Should session.last_lcandidates ==# []
  Should session.last_pattern_raw == ''
  Should session.now_quitting_p == 0
  Should session.original_completeopt ==# original_completeopt
  Should session.original_curwinnr == original_curwinnr
  Should session.original_winrestcmd ==# original_winrestcmd
  Should session.sources ==# [
  \   ku#available_sources()['test'],
  \   ku#available_sources()['abc']
  \ ]

  " Reset side effect.
  ResetContext
endfunction




function s:describe__s_on_CursorMovedI()  "{{{1
  It requires the following initialization

  call Set('s:session', Call('s:new_session', []))
  set virtualedit=onemore

  It should complete the prompt if it doesn't exist in the current line

  normal! o
  Should getline('.') ==# ''

  Should Call('s:on_CursorMovedI') ==# repeat("\<Right>", len(Ref('s:PROMPT')))

  Should getline('.') ==# Ref('s:PROMPT')
  Should Ref('s:session').last_column == 1
  Should Ref('s:session').last_pattern_raw ==# ''

  It should move the cursor outside the prompt if it points inside

  normal! o
  call setline('.', Ref('s:PROMPT'))
  normal! ^
  Should getline('.') ==# Ref('s:PROMPT')
  Should col('.') == 1

  Should Call('s:on_CursorMovedI')
  \ ==# repeat("\<Right>", len(Ref('s:PROMPT')) - col('.') + 1)

  Should getline('.') ==# Ref('s:PROMPT')
  Should col('.') == 1
  Should Ref('s:session').last_column == 1
  Should Ref('s:session').last_pattern_raw ==# Ref('s:PROMPT')

  It should start completion if new character is inserted
  " BUGS: The situation to test is that the cursor position is beyond the end
  " of the current line in Insert mode.  But it's hard to perfectly emulate
  " this situation by script.

  normal! o
  let _ = Ref('s:PROMPT') . 'starmine'
  call setline('.', _)
  normal! $l
  Should getline('.') ==# _
  Should col('.') == len(_) + 1

  Should Call('s:on_CursorMovedI') ==# Ref('s:KEYS_TO_START_COMPLETION')

  Should getline('.') ==# _
  Should col('.') == len(_) + 1
  Should Ref('s:session').last_column == len(_) + 1
  Should Ref('s:session').last_pattern_raw ==# _

  It should return '' otherwise

  normal! o
  let _ = Ref('s:PROMPT') . 'starmine'
  call setline('.', _)
  normal! $
  Should getline('.') ==# _
  Should col('.') == len(_)

  Should Call('s:on_CursorMovedI') ==# ''

  Should getline('.') ==# _
  Should col('.') == len(_)
  Should Ref('s:session').last_column == len(_)
  Should Ref('s:session').last_pattern_raw ==# _

  It requires to reset side effect

  bwipeout!
  set virtualedit&
  ResetContext
endfunction




function s:describe__s_on_CursorMovedI__on_ACC()  "{{{1
  " BUGS: The situation to test is that the cursor position is beyond the end
  " of the current line in Insert mode.  But it's hard to perfectly emulate
  " this situation by script.

  It requires the following initialization

  set virtualedit=onemore
  let source = {'valid_for_acc_p': function('ku#default_valid_for_acc_p')}

  It should not do ACC if a separator is s:inserted_by_acc_p

  let session = Call('s:new_session', [])
  let session.inserted_by_acc_p = !0
  let session.last_lcandidates = ['DUMMY TO CHECK THAT ACC IS NOT INVOKED']
  call Set('s:session', session)
  normal! o
  let _ = Ref('s:PROMPT') . 'Estel' . g:ku_component_separators[0]
  call setline('.', _)
  normal! $l
  Should getline('.') ==# _
  Should col('.') == len(_) + 1

  Should Call('s:on_CursorMovedI') ==# Ref('s:KEYS_TO_START_COMPLETION')

  Should getline('.') ==# _
  Should col('.') == len(_) + 1
  Should Ref('s:session').last_column == len(_) + 1
  Should Ref('s:session').last_pattern_raw ==# _
  Should Ref('s:session').inserted_by_acc_p == 0

  It should not do ACC if the last inserted character is not a separator

  let session = Call('s:new_session', [])
  let session.last_lcandidates = ['DUMMY TO CHECK THAT ACC IS NOT INVOKED']
  call Set('s:session', session)
  normal! o
  let _ = Ref('s:PROMPT') . 'Estel'
  call setline('.', _)
  normal! $l
  Should getline('.') ==# _
  Should col('.') == len(_) + 1

  Should Call('s:on_CursorMovedI') ==# Ref('s:KEYS_TO_START_COMPLETION')

  Should getline('.') ==# _
  Should col('.') == len(_) + 1
  Should Ref('s:session').last_column == len(_) + 1
  Should Ref('s:session').last_pattern_raw ==# _
  Should Ref('s:session').inserted_by_acc_p == 0

  It should not do ACC if the length of pattern is too short

  let session = Call('s:new_session', [])
  let session.last_lcandidates = ['DUMMY TO CHECK THAT ACC IS NOT INVOKED']
  call Set('s:session', session)
  normal! o
  let _ = Ref('s:PROMPT') . '' . g:ku_component_separators[0]
  call setline('.', _)
  normal! $l
  Should getline('.') ==# _
  Should col('.') == len(_) + 1

  Should Call('s:on_CursorMovedI') ==# Ref('s:KEYS_TO_START_COMPLETION')

  Should getline('.') ==# _
  Should col('.') == len(_) + 1
  Should Ref('s:session').last_column == len(_) + 1
  Should Ref('s:session').last_pattern_raw ==# _
  Should Ref('s:session').inserted_by_acc_p == 0

  It should do ACC - there is a proper candidate

  let session = Call('s:new_session', [])
  let session.last_lcandidates = [
  \ {'word': '/usr/share/man/man1/ls.1.gz', 'ku__source': source},
  \ ]
  call Set('s:session', session)
  normal! o
  let _ = Ref('s:PROMPT') . '1' . g:ku_component_separators[0]
  call setline('.', _)
  normal! $l
  Should getline('.') ==# _
  Should col('.') == len(_) + 1

  Should Call('s:on_CursorMovedI') ==# "\<End>" . _[-1:]

  Should getline('.') ==# '/usr/share/man/man1'
  Should col('.') == len(_) + 1
  Should Ref('s:session').last_column == len(_) + 1
  Should Ref('s:session').last_pattern_raw ==# _
  Should Ref('s:session').inserted_by_acc_p != 0

  It should do ACC - there is no proper candidate

  let session = Call('s:new_session', [])
  let session.last_lcandidates = [
  \ {'word': '/usr/share/man/man2/_exit.2.gz', 'ku__source': source},
  \ ]
  call Set('s:session', session)
  normal! o
  let _ = Ref('s:PROMPT') . '1' . g:ku_component_separators[0]
  call setline('.', _)
  normal! $l
  Should getline('.') ==# _
  Should col('.') == len(_) + 1

  Should Call('s:on_CursorMovedI') ==# Ref('s:KEYS_TO_START_COMPLETION')

  Should getline('.') ==# _
  Should col('.') == len(_) + 1
  Should Ref('s:session').last_column == len(_) + 1
  Should Ref('s:session').last_pattern_raw ==# _
  Should Ref('s:session').inserted_by_acc_p == 0

  It requires to reset side effect

  bwipeout!
  set virtualedit&
  ResetContext
endfunction




function s:describe__s_on_InsertEnter()  "{{{1
  It requires the following initialization

  set virtualedit=onemore

  It should complete the prompt if it doesn't exist in the current line

  normal! o
  Should getline('.') ==# ''

  Should Call('s:on_InsertEnter') ==# repeat("\<Right>", len(Ref('s:PROMPT')))

  Should getline('.') ==# Ref('s:PROMPT')
  Should Ref('s:session').last_column == 1
  Should Ref('s:session').last_pattern_raw ==# ''

  It should move the cursor outside the prompt if it points inside

  normal! o
  call setline('.', Ref('s:PROMPT'))
  normal! ^
  Should getline('.') ==# Ref('s:PROMPT')
  Should col('.') == 1

  Should Call('s:on_InsertEnter')
  \ ==# repeat("\<Right>", len(Ref('s:PROMPT')) - col('.') + 1)

  Should getline('.') ==# Ref('s:PROMPT')
  Should col('.') == 1
  Should Ref('s:session').last_column == 1
  Should Ref('s:session').last_pattern_raw ==# Ref('s:PROMPT')

  It should start completion if new character is inserted
  " BUGS: The situation to test is that the cursor position is beyond the end
  " of the current line in Insert mode.  But it's hard to perfectly emulate
  " this situation by script.

  normal! o
  let _ = Ref('s:PROMPT') . 'starmine'
  call setline('.', _)
  normal! $l
  Should getline('.') ==# _
  Should col('.') == len(_) + 1

  Should Call('s:on_InsertEnter') ==# Ref('s:KEYS_TO_START_COMPLETION')

  Should getline('.') ==# _
  Should col('.') == len(_) + 1
  Should Ref('s:session').last_column == len(_) + 1
  Should Ref('s:session').last_pattern_raw ==# _

  It should return '' otherwise

  normal! o
  let _ = Ref('s:PROMPT') . 'starmine'
  call setline('.', _)
  normal! $
  Should getline('.') ==# _
  Should col('.') == len(_)

  Should Call('s:on_InsertEnter') ==# ''

  Should getline('.') ==# _
  Should col('.') == len(_)
  Should Ref('s:session').last_column == len(_)
  Should Ref('s:session').last_pattern_raw ==# _

  It requires to reset side effect

  bwipeout!
  set virtualedit&
  ResetContext
endfunction




function s:describe__s_quit_session()  "{{{1
  topleft new
  botright new
  set completeopt=preview
  let bufnr = bufnr('')
  let winnr = winnr()
  let winrestcmd = winrestcmd()
  let completeopt = &completeopt

  Should ku#start() == 1
  Should nr2char(getchar(0)) ==# 'A'
  Should nr2char(getchar(0)) ==# ''

  Should bufnr('') != bufnr
  Should winnr() != winnr
  Should winrestcmd() !=# winrestcmd
  Should &completeopt !=# completeopt

  It should reset side effect by ku#start()

  Should Call('s:quit_session') == 1
  let session = Ref('s:session')
  Should bufnr('') == bufnr
  Should winnr() == winnr
  Should winrestcmd() ==# winrestcmd
  Should &completeopt ==# completeopt

  " NTY: recursively called s:quit_session() - but how to test it?

  " Reset side effect.
  call ku#start()
  Should nr2char(getchar(0)) ==# 'A'
  Should nr2char(getchar(0)) ==# ''
  bwipeout!
  only
endfunction




function s:describe__s_remove_prompt()  "{{{1
  It should remove a prompt in a:s

  Should Call('s:remove_prompt', Ref('s:PROMPT').'abc') ==# 'abc'
  Should Call('s:remove_prompt', repeat(Ref('s:PROMPT'),2)) ==# Ref('s:PROMPT')

  It should the same string as a:s if a:s doesn't contain a prompt

  Should Call('s:remove_prompt', 'abc') ==# 'abc'
  Should Call('s:remove_prompt', '!@#') ==# '!@#'
endfunction




function s:describe__s_valid_key_p()  "{{{1
  It should return false for invalid argument

  Should Call('s:valid_key_p', {}, '8bit', 0) == 0

  It should return false if key doesn't exist

  Should Call('s:valid_key_p', {'8bit': 'rave'}, 0, 'string') == 0

  It should return true for valid values

  Should Call('s:valid_key_p', {'8bit': {}}, '8bit', 'dictionary') == 1
  Should Call('s:valid_key_p', {'8': function('len')}, '8', 'function') == 1
  Should Call('s:valid_key_p', {'8bit': []}, '8bit', 'list') == 1
  Should Call('s:valid_key_p', {'8bit': 3339}, '8bit', 'number') == 1
  Should Call('s:valid_key_p', {'8bit': 'rave'}, '8bit', 'string') == 1

  It should return true for list with valid values

  Should Call('s:valid_key_p', {'A': [1, 2, 3]}, 'A', 'list of numbers') == 1
  Should Call('s:valid_key_p', {'A': []}, 'A', 'list of functions') == 1
  Should Call('s:valid_key_p',
  \ {'A': [function('len')]},
  \ 'A',
  \ 'list of functions')
  \ == 1

  It should return false for list with invalid values

  Should Call('s:valid_key_p', {'A': [1, 2, 3]}, 'A', 'list of strings') == 0
  Should Call('s:valid_key_p', {'A': [1,'2',3]}, 'A', 'list of numbers') == 0
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
