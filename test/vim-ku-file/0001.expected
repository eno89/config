===== let _ = ku#file#acc_valid_p('', file_item, ku#path_separator())
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('', directory_item, ku#path_separator())
TEST: _  ==>  1 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('', file_item, 'a')  " Invalid sep.
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('', directory_item, 'a')  " Invalid sep.
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('foo', file_item, ku#path_separator())
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('foo', directory_item, ku#path_separator())
TEST: _  ==>  1 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('foo', file_item, 'a')  " Invalid sep.
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('foo', directory_item, 'a')  " Invalid sep.
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#action_table('')
TEST: type(_)  ==>  type({}) ... ok
TEST: _  ==>  expected_action_table ... ok
Result: 2 / 2

===== let _ = ku#file#action_table('xyzzy')  " {ext} is not used.
TEST: type(_)  ==>  type({}) ... ok
TEST: _  ==>  expected_action_table ... ok
Result: 2 / 2

===== let _ = ku#file#available_sources()
TEST: type(_)  ==>  type([]) ... ok
TEST: _  ==>  ['file'] ... ok
Result: 2 / 2

===== let _ = ku#file#key_table('')
TEST: type(_)  ==>  type({}) ... ok
TEST: _  ==>  expected_key_table ... ok
Result: 2 / 2

===== let _ = ku#file#key_table('xyzzy')  " {ext} is not used.
TEST: type(_)  ==>  type({}) ... ok
TEST: _  ==>  expected_key_table ... ok
Result: 2 / 2

===== let _ = ku#file#on_source_enter('')
TEST: _  ==>  0 ... ok
TEST: VARS.cached_items  ==>  {} ... ok
Result: 2 / 2

===== let VARS.cached_items.foo = 'bar'
TEST: VARS.cached_items.foo  ==>  'bar' ... ok
TEST: VARS.cached_items  ==>  {'foo': 'bar'} ... ok
TEST: ku#file#on_source_enter('')  ==>  0 ... ok
TEST: VARS.cached_items  ==>  {} ... ok
Result: 4 / 4

===== let _ = map(chars, "ku#file#special_char_p('', v:val)")
TEST: type(_)  ==>  type([]) ... ok
TEST: type(_[0])  ==>  type(0) ... ok
TEST: _[char2nr('/')]  ==>  1 ... ok
TEST: _[char2nr('\')]  ==>  1 ... ok
TEST: _[char2nr(':')]  ==>  1 ... ok
TEST: _[char2nr('.')]  ==>  1 ... ok
TEST: sum  ==>  4 ... ok
Result: 7 / 7

===== let _ = map(chars, "ku#file#special_char_p('xyzzy', v:val)")
TEST: type(_)  ==>  type([]) ... ok
TEST: type(_[0])  ==>  type(0) ... ok
TEST: _[char2nr('/')]  ==>  1 ... ok
TEST: _[char2nr('\')]  ==>  1 ... ok
TEST: _[char2nr(':')]  ==>  1 ... ok
TEST: _[char2nr('.')]  ==>  1 ... ok
TEST: sum  ==>  4 ... ok
Result: 7 / 7

===== let _ = map(chars, "ku#file#special_char_p('', v:val)")
TEST: type(_)  ==>  type([]) ... ok
TEST: type(_[0])  ==>  type(0) ... ok
TEST: _[0]  ==>  1 ... ok
TEST: _[1]  ==>  0 ... ok
TEST: _[2]  ==>  0 ... ok
TEST: _[3]  ==>  1 ... ok
Result: 6 / 6

===== let _ = map(chars, "ku#file#special_char_p('xyzzy', v:val)")
TEST: type(_)  ==>  type([]) ... ok
TEST: type(_[0])  ==>  type(0) ... ok
TEST: _[0]  ==>  1 ... ok
TEST: _[1]  ==>  0 ... ok
TEST: _[2]  ==>  0 ... ok
TEST: _[3]  ==>  1 ... ok
Result: 6 / 6

===== Total
Result: 50 / 50
