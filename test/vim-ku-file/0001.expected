===== let _ = Call('s:archive_type', ku#make_path('a.zip'))
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  ku#file#_local_variables().ARCHIVE_TYPE_ZIP ... ok
Result: 2 / 2

===== let _ = Call('s:archive_type', ku#make_path('dir1.zip'))
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  ku#file#_local_variables().ARCHIVE_TYPE_INVALID ... ok
Result: 2 / 2

===== let _ = Call('s:archive_type', ku#make_path('dir1', 'file2'))
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  ku#file#_local_variables().ARCHIVE_TYPE_INVALID ... ok
Result: 2 / 2

===== let _ = Call('s:archive_type', ku#make_path('.', 'b.zip'))
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  ku#file#_local_variables().ARCHIVE_TYPE_ZIP ... ok
Result: 2 / 2

===== let _ = ku#file#acc_valid_p('', file_item, ku#path_separator())
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('', directory_item, ku#path_separator())
TEST: _  ==>  1 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('', file_item, 'a')  " Invalid sep.
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('', directory_item, 'a')  " Invalid sep.
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('foo', file_item, ku#path_separator())
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('foo', directory_item, ku#path_separator())
TEST: _  ==>  1 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('foo', file_item, 'a')  " Invalid sep.
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#acc_valid_p('foo', directory_item, 'a')  " Invalid sep.
TEST: _  ==>  0 ... ok
Result: 1 / 1

===== let _ = ku#file#action_extract_asis(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'extract-asis: Not available for this item: ' . string(item.word) ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_asis(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: archive' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_asis(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: archive' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_asis(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: archive' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_asis(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: content' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_asis(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: content' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_asis(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: content' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_smartly(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'extract-smartly: Not available for this item: ' . string(item.word) ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_smartly(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: archive' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_smartly(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: archive' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_smartly(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: archive' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_smartly(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: content' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_smartly(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: content' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_smartly(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: content' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_solely(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'extract-solely: Not available for this item: ' . string(item.word) ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_solely(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'extract-solely: Not available for this item: ' . string(item.word) ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_solely(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'extract-solely: Not available for this item: ' . string(item.word) ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_solely(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'extract-solely: Not available for this item: ' . string(item.word) ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_solely(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: content' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_solely(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: content' ... ok
Result: 2 / 2

===== let _ = ku#file#action_extract_solely(item)
TEST: type(_)  ==>  type('') ... ok
TEST: _  ==>  'FIXME: NIY: content' ... ok
Result: 2 / 2

===== let _ = ku#file#action_table('')
TEST: type(_)  ==>  type({}) ... ok
TEST: _  ==>  expected_action_table ... ok
Result: 2 / 2

===== let _ = ku#file#action_table('xyzzy')  " {ext} is not used.
TEST: type(_)  ==>  type({}) ... ok
TEST: _  ==>  expected_action_table ... ok
Result: 2 / 2

===== let _ = ku#file#available_sources()
TEST: type(_)  ==>  type([]) ... ok
TEST: _  ==>  ['file'] ... ok
Result: 2 / 2

===== let _ = ku#file#gather_items('', '')  " Current directory
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  6 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: map(copy(_), 'v:val.word')  ==>  ['a.zip', 'b.zip', 'c.zip', 'dir1', 'dir1.zip', 'file1'] ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', 'money')  " Last component is ignored
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  6 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: map(copy(_), 'v:val.word')  ==>  ['a.zip', 'b.zip', 'c.zip', 'dir1', 'dir1.zip', 'file1'] ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', '.')  " Dot items now appear.
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  8 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: map(copy(_), 'v:val.word')  ==>  ['a.zip', 'b.zip', 'c.zip', 'dir1', 'dir1.zip', 'file1', '..', '.file1'] ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', '.money')  " Only '.' matters.
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  8 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: map(copy(_), 'v:val.word')  ==>  ['a.zip', 'b.zip', 'c.zip', 'dir1', 'dir1.zip', 'file1', '..', '.file1'] ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', 'money.')  " Only first '.' matters.
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  6 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: map(copy(_), 'v:val.word')  ==>  ['a.zip', 'b.zip', 'c.zip', 'dir1', 'dir1.zip', 'file1'] ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('No such dir', ''))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  0 ... ok
Result: 2 / 2

===== let _ = ku#file#gather_items('', ku#make_path('file1', ''))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  0 ... ok
Result: 2 / 2

===== let _ = ku#file#gather_items('', 'dir1')  " Not traversed w/ this pat.
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  6 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: map(copy(_), 'v:val.word')  ==>  ['a.zip', 'b.zip', 'c.zip', 'dir1', 'dir1.zip', 'file1'] ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('dir1', ''))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  2 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0].word  ==>  ku#make_path('dir1', 'dir2') ... ok
TEST: _[1].word  ==>  ku#make_path('dir1', 'file2') ... ok
Result: 5 / 5

===== let _ = ku#file#gather_items('', ku#make_path('dir1', 'ignored'))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  2 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0].word  ==>  ku#make_path('dir1', 'dir2') ... ok
TEST: _[1].word  ==>  ku#make_path('dir1', 'file2') ... ok
Result: 5 / 5

===== let _ = ku#file#gather_items('', ku#make_path('dir1', '. aappeared!'))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  4 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0].word  ==>  ku#make_path('dir1', 'dir2') ... ok
TEST: _[1].word  ==>  ku#make_path('dir1', 'file2') ... ok
TEST: _[2].word  ==>  ku#make_path('dir1', '..') ... ok
TEST: _[3].word  ==>  ku#make_path('dir1', '.file2') ... ok
Result: 7 / 7

===== let _ = ku#file#gather_items('', ku#make_path('dir1', 'bad . here'))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  2 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0].word  ==>  ku#make_path('dir1', 'dir2') ... ok
TEST: _[1].word  ==>  ku#make_path('dir1', 'file2') ... ok
Result: 5 / 5

===== let _ = ku#file#gather_items('', ku#make_path('dir1', 'dir2', ''))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  1 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0].word  ==>  ku#make_path('dir1', 'dir2', 'file3') ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('dir1', 'dir2', '.'))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  3 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0].word  ==>  ku#make_path('dir1', 'dir2', 'file3') ... ok
TEST: _[1].word  ==>  ku#make_path('dir1', 'dir2', '..') ... ok
TEST: _[2].word  ==>  ku#make_path('dir1', 'dir2', '.file3') ... ok
Result: 6 / 6

===== let _ = ku#file#gather_items('', ku#path_separator())
TEST: type(_)  ==>  type([]) ... ok
TEST: 0 < len(_)  ==>  1 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: len(filter(copy(_), 'v:val.word == ku#path_separator() . ".."'))  ==>  0 ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('', '.'))
TEST: type(_)  ==>  type([]) ... ok
TEST: 0 < len(_)  ==>  1 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: len(filter(copy(_), 'v:val.word == ku#path_separator() . ".."'))  ==>  0 ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('Yes, {ext} is ignored', '')
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  6 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: map(copy(_), 'v:val.word')  ==>  ['a.zip', 'b.zip', 'c.zip', 'dir1', 'dir1.zip', 'file1'] ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('a.zip'))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  6 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: map(copy(_), 'v:val.word')  ==>  ['a.zip', 'b.zip', 'c.zip', 'dir1', 'dir1.zip', 'file1'] ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('a.zip', ''))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  1 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0]  ==>  { 'word': ku#make_path('a.zip', 'a', 'foo.txt'), 'menu': 'in archive', 'ku_file_archive_format': 'zip', 'ku_file_archive_path': ku#make_path('a.zip'), 'ku_file_archive_content_path': ku#make_path('a', 'foo.txt'), } ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('a.zip', 'foo'))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  1 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0]  ==>  { 'word': ku#make_path('a.zip', 'a', 'foo.txt'), 'menu': 'in archive', 'ku_file_archive_format': 'zip', 'ku_file_archive_path': ku#make_path('a.zip'), 'ku_file_archive_content_path': ku#make_path('a', 'foo.txt'), } ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('a.zip', 'foo', 'bar'))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  1 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0]  ==>  { 'word': ku#make_path('a.zip', 'a', 'foo.txt'), 'menu': 'in archive', 'ku_file_archive_format': 'zip', 'ku_file_archive_path': ku#make_path('a.zip'), 'ku_file_archive_content_path': ku#make_path('a', 'foo.txt'), } ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('b.zip', ''))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  1 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0]  ==>  { 'word': ku#make_path('b.zip', 'bar.txt'), 'menu': 'in archive', 'ku_file_archive_format': 'zip', 'ku_file_archive_path': ku#make_path('b.zip'), 'ku_file_archive_content_path': ku#make_path('bar.txt'), } ... ok
Result: 4 / 4

===== let _ = ku#file#gather_items('', ku#make_path('c.zip', ''))
TEST: type(_)  ==>  type([]) ... ok
TEST: len(_)  ==>  1 ... ok
TEST: type(_[0])  ==>  type({}) ... ok
TEST: _[0]  ==>  { 'word': ku#make_path('c.zip', 'd', 'baz.txt'), 'menu': 'in archive', 'ku_file_archive_format': 'zip', 'ku_file_archive_path': ku#make_path('c.zip'), 'ku_file_archive_content_path': ku#make_path('d', 'baz.txt'), } ... ok
Result: 4 / 4

===== let _ = ku#file#key_table('')
TEST: type(_)  ==>  type({}) ... ok
TEST: _  ==>  expected_key_table ... ok
Result: 2 / 2

===== let _ = ku#file#key_table('xyzzy')  " {ext} is not used.
TEST: type(_)  ==>  type({}) ... ok
TEST: _  ==>  expected_key_table ... ok
Result: 2 / 2

===== let _ = ku#file#on_source_enter('')
TEST: _  ==>  0 ... ok
TEST: VARS.cached_items  ==>  {} ... ok
Result: 2 / 2

===== let VARS.cached_items.foo = 'bar'
TEST: VARS.cached_items.foo  ==>  'bar' ... ok
TEST: VARS.cached_items  ==>  {'foo': 'bar'} ... ok
TEST: ku#file#on_source_enter('')  ==>  0 ... ok
TEST: VARS.cached_items  ==>  {} ... ok
Result: 4 / 4

===== let _ = map(chars, "ku#file#special_char_p('', v:val)")
TEST: type(_)  ==>  type([]) ... ok
TEST: type(_[0])  ==>  type(0) ... ok
TEST: _[char2nr('/')]  ==>  1 ... ok
TEST: _[char2nr('\')]  ==>  1 ... ok
TEST: _[char2nr(':')]  ==>  1 ... ok
TEST: _[char2nr('.')]  ==>  1 ... ok
TEST: sum  ==>  4 ... ok
Result: 7 / 7

===== let _ = map(chars, "ku#file#special_char_p('xyzzy', v:val)")
TEST: type(_)  ==>  type([]) ... ok
TEST: type(_[0])  ==>  type(0) ... ok
TEST: _[char2nr('/')]  ==>  1 ... ok
TEST: _[char2nr('\')]  ==>  1 ... ok
TEST: _[char2nr(':')]  ==>  1 ... ok
TEST: _[char2nr('.')]  ==>  1 ... ok
TEST: sum  ==>  4 ... ok
Result: 7 / 7

===== let _ = map(chars, "ku#file#special_char_p('', v:val)")
TEST: type(_)  ==>  type([]) ... ok
TEST: type(_[0])  ==>  type(0) ... ok
TEST: _[0]  ==>  1 ... ok
TEST: _[1]  ==>  0 ... ok
TEST: _[2]  ==>  0 ... ok
TEST: _[3]  ==>  1 ... ok
Result: 6 / 6

===== let _ = map(chars, "ku#file#special_char_p('xyzzy', v:val)")
TEST: type(_)  ==>  type([]) ... ok
TEST: type(_[0])  ==>  type(0) ... ok
TEST: _[0]  ==>  1 ... ok
TEST: _[1]  ==>  0 ... ok
TEST: _[2]  ==>  0 ... ok
TEST: _[3]  ==>  1 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', '')
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  [''] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('foo'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['foo'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('foo', 'bar'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['foo', 'bar'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('foo', 'bar', 'baz'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['foo', 'bar', 'baz'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('.foo', 'bar', 'baz'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['.foo', 'bar', 'baz'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('.foo', '.bar', 'baz'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['.foo', '.bar', 'baz'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('.foo', '.bar', '.baz'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['.foo', '.bar', '.baz'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  1 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('.foo'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['.foo'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  1 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('', ''))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['', ''] ... ok
TEST: _.root_directory_pattern_p  ==>  1 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('', 'foo'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['', 'foo'] ... ok
TEST: _.root_directory_pattern_p  ==>  1 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('', 'foo', 'bar'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['', 'foo', 'bar'] ... ok
TEST: _.root_directory_pattern_p  ==>  1 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('', 'foo', '.bar'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['', 'foo', '.bar'] ... ok
TEST: _.root_directory_pattern_p  ==>  1 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  1 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('a.zip'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['a.zip'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('.a.zip'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['.a.zip'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  1 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('', 'a.zip'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['', 'a.zip'] ... ok
TEST: _.root_directory_pattern_p  ==>  1 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('', '.a.zip'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['', '.a.zip'] ... ok
TEST: _.root_directory_pattern_p  ==>  1 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  1 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('a.zip', ''))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'archive' ... ok
TEST: _.components  ==>  ['a.zip', ''] ... ok
TEST: _.archive_format  ==>  'zip' ... ok
TEST: _.leading_part  ==>  ku#make_path('a.zip') ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('a.zip', 'bar', 'baz'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'archive' ... ok
TEST: _.components  ==>  ['a.zip', 'bar', 'baz'] ... ok
TEST: _.archive_format  ==>  'zip' ... ok
TEST: _.leading_part  ==>  ku#make_path('a.zip') ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('dir1.zip'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['dir1.zip'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  0 ... ok
Result: 6 / 6

===== let _ = Call('s:parse_pattern', ku#make_path('dir1.zip', '.xxx'))
TEST: type(_)  ==>  type({}) ... ok
TEST: len(keys(_))  ==>  4 ... ok
TEST: _.type  ==>  'directory' ... ok
TEST: _.components  ==>  ['dir1.zip', '.xxx'] ... ok
TEST: _.root_directory_pattern_p  ==>  0 ... ok
TEST: _.user_seems_want_dotfiles_p  ==>  1 ... ok
Result: 6 / 6

===== Total
Result: 316 / 316
