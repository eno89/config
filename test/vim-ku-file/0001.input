" Tests for misc. utilities
" Set up  "{{{1

let s:SID_PREFIX = ku#file#_sid_prefix()
function Call(function_name, ...)
  return call(substitute(a:function_name, '^s:', s:SID_PREFIX, ''), a:000)
endfunction

let g:ku_personal_runtime = split(&runtimepath, ',')[0]


let s:expected_action_table = {
  \   'default': 'ku#file#action_open',
  \   'open!': 'ku#file#action_open_x',
  \   'open': 'ku#file#action_open',
  \ }
let s:expected_key_table = {
\     "\<C-o>": 'open',
\     'O': 'open!',
\     'o': 'open',
\   }




function s:test_ku_file_acc_valid_p_0001()  "{{{1
  let file_item = {'word': ku#make_path('test', 'vim-ku-file', '0001.input')}
  Title let _ = ku#file#acc_valid_p('', file_item, ku#path_separator())
  Assert _ ==> 0
endfunction




function s:test_ku_file_acc_valid_p_0002()  "{{{1
  let directory_item = {'word': ku#make_path('test', 'vim-ku-file')}
  Title let _ = ku#file#acc_valid_p('', directory_item, ku#path_separator())
  Assert _ ==> 1
endfunction




function s:test_ku_file_acc_valid_p_0003()  "{{{1
  let file_item = {'word': ku#make_path('test', 'vim-ku-file', '0001.input')}
  Title let _ = ku#file#acc_valid_p('', file_item, 'a')  " Invalid sep.
  Assert _ ==> 0
endfunction




function s:test_ku_file_acc_valid_p_0004()  "{{{1
  let directory_item = {'word': ku#make_path('test', 'vim-ku-file')}
  Title let _ = ku#file#acc_valid_p('', directory_item, 'a')  " Invalid sep.
  Assert _ ==> 0
endfunction




function s:test_ku_file_acc_valid_p_0005()  "{{{1
  let file_item = {'word': ku#make_path('test', 'vim-ku-file', '0001.input')}
  Title let _ = ku#file#acc_valid_p('foo', file_item, ku#path_separator())
  Assert _ ==> 0
endfunction




function s:test_ku_file_acc_valid_p_0006()  "{{{1
  let directory_item = {'word': ku#make_path('test', 'vim-ku-file')}
  Title let _ = ku#file#acc_valid_p('foo', directory_item, ku#path_separator())
  Assert _ ==> 1
endfunction




function s:test_ku_file_acc_valid_p_0007()  "{{{1
  let file_item = {'word': ku#make_path('test', 'vim-ku-file', '0001.input')}
  Title let _ = ku#file#acc_valid_p('foo', file_item, 'a')  " Invalid sep.
  Assert _ ==> 0
endfunction




function s:test_ku_file_acc_valid_p_0008()  "{{{1
  let directory_item = {'word': ku#make_path('test', 'vim-ku-file')}
  Title let _ = ku#file#acc_valid_p('foo', directory_item, 'a')  " Invalid sep.
  Assert _ ==> 0
endfunction




function s:test_ku_file_action_table_0001()  "{{{1
  let expected_action_table = s:expected_action_table
  Title let _ = ku#file#action_table('')
  Assert type(_) ==> type({})
  Assert _ ==> expected_action_table
endfunction




function s:test_ku_file_action_table_0002()  "{{{1
  let expected_action_table = s:expected_action_table
  Title let _ = ku#file#action_table('xyzzy')  " {ext} is not used.
  Assert type(_) ==> type({})
  Assert _ ==> expected_action_table
endfunction




function s:test_ku_file_available_sources_0001()  "{{{1
  Title let _ = ku#file#available_sources()
  Assert type(_) ==> type([])
  Assert _ ==> ['file']
endfunction




function s:test_ku_file_key_table_0001()  "{{{1
  let expected_key_table = s:expected_key_table
  Title let _ = ku#file#key_table('')
  Assert type(_) ==> type({})
  Assert _ ==> expected_key_table
endfunction




function s:test_ku_file_key_table_0002()  "{{{1
  let expected_key_table = s:expected_key_table
  Title let _ = ku#file#key_table('xyzzy')  " {ext} is not used.
  Assert type(_) ==> type({})
  Assert _ ==> expected_key_table
endfunction




function s:test_ku_file_on_source_enter_0001()  "{{{1
  let VARS = ku#file#_local_variables()

  Title let _ = ku#file#on_source_enter('')
  Assert _ ==> 0
  Assert VARS.cached_items ==> {}
endfunction




function s:test_ku_file_on_source_enter_0002()  "{{{1
  let VARS = ku#file#_local_variables()

  Title let VARS.cached_items.foo = 'bar'
  Assert VARS.cached_items.foo ==> 'bar'
  Assert VARS.cached_items ==> {'foo': 'bar'}
  Assert ku#file#on_source_enter('') ==> 0
  Assert VARS.cached_items ==> {}
endfunction




function s:test_ku_file_special_char_p_0001()  "{{{1
  let chars = map(range(0x100), 'nr2char(v:val)')

  Title let _ = map(chars, "ku#file#special_char_p('', v:val)")
  Assert type(_) ==> type([])
  Assert type(_[0]) ==> type(0)

    " By the default value of g:ku_component_separators.
  Assert _[char2nr('/')] ==> 1
  Assert _[char2nr('\')] ==> 1
  Assert _[char2nr(':')] ==> 1
    " By ku source file itself.
  Assert _[char2nr('.')] ==> 1

  let _[0x00] = 0  " Ignore NUL, because Vim script cannot handle it.
  let sum = 0
  for i in _
    let sum += abs(i)
  endfor
    " So the rest of characters are not special ones.
  Assert sum ==> 4
endfunction




function s:test_ku_file_special_char_p_0002()  "{{{1
  let chars = map(range(0x100), 'nr2char(v:val)')

  Title let _ = map(chars, "ku#file#special_char_p('xyzzy', v:val)")
  Assert type(_) ==> type([])
  Assert type(_[0]) ==> type(0)

    " By the default value of g:ku_component_separators.
  Assert _[char2nr('/')] ==> 1
  Assert _[char2nr('\')] ==> 1
  Assert _[char2nr(':')] ==> 1
    " By ku source file itself.
  Assert _[char2nr('.')] ==> 1

  let _[0x00] = 0  " Ignore NUL, because Vim script cannot handle it.
  let sum = 0
  for i in _
    let sum += abs(i)
  endfor
    " So the rest of characters are not special ones.
  Assert sum ==> 4
endfunction




function s:test_ku_file_special_char_p_0003()  "{{{1
  let chars = ['', 'foo', ':\/', g:ku_component_separators]

  Title let _ = map(chars, "ku#file#special_char_p('', v:val)")
  Assert type(_) ==> type([])
  Assert type(_[0]) ==> type(0)

    " FIXME: Null string should not be accepcted.
  Assert _[0] ==> 1

    " Not a single-character string.  Rejected.
  Assert _[1] ==> 0
  Assert _[2] ==> 0

    " FIXME: Not a single-character string, but accepted
    "        because of the use of stridx().
  Assert _[3] ==> 1
endfunction




function s:test_ku_file_special_char_p_0004()  "{{{1
  let chars = ['', 'foo', ':\/', g:ku_component_separators]

  Title let _ = map(chars, "ku#file#special_char_p('xyzzy', v:val)")
  Assert type(_) ==> type([])
  Assert type(_[0]) ==> type(0)

    " FIXME: Null string should not be accepcted.
  Assert _[0] ==> 1

    " Not a single-character string.  Rejected.
  Assert _[1] ==> 0
  Assert _[2] ==> 0

    " FIXME: Not a single-character string, but accepted
    "        because of the use of stridx().
  Assert _[3] ==> 1
endfunction




" Entities which are not tested yet  "{{{1
"
" API
" ku#file#gather_items(source_name_ext, pattern)
"
" Actions
" s:open(bang, item)
" ku#file#action_open(item)
" ku#file#action_open_x(item)




Test  "{{{1

" __END__
" vim: filetype=vim foldmethod=marker
