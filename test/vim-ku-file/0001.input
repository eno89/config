" Tests for misc. utilities
" Set up  "{{{1

let s:SID_PREFIX = ku#file#_sid_prefix()
function Call(function_name, ...)
  return call(substitute(a:function_name, '^s:', s:SID_PREFIX, ''), a:000)
endfunction

let g:ku_personal_runtime = split(&runtimepath, ',')[0]


let s:expected_action_table = {
  \   'default': 'ku#file#action_open',
  \   'open!': 'ku#file#action_open_x',
  \   'open': 'ku#file#action_open',
  \ }
let s:expected_key_table = {
\     "\<C-o>": 'open',
\     'O': 'open!',
\     'o': 'open',
\   }




function s:test_ku_file_action_table_0001()  "{{{1
  let expected_action_table = s:expected_action_table
  Title let _ = ku#file#action_table('')
  Assert type(_) ==> type({})
  Assert _ ==> expected_action_table
endfunction




function s:test_ku_file_action_table_0002()  "{{{1
  let expected_action_table = s:expected_action_table
  Title let _ = ku#file#action_table('xyzzy')  " {ext} is not used.
  Assert type(_) ==> type({})
  Assert _ ==> expected_action_table
endfunction




function s:test_ku_file_available_sources_0001()  "{{{1
  Title let _ = ku#file#available_sources()
  Assert type(_) ==> type([])
  Assert _ ==> ['file']
endfunction




function s:test_ku_file_key_table_0001()  "{{{1
  let expected_key_table = s:expected_key_table
  Title let _ = ku#file#key_table('')
  Assert type(_) ==> type({})
  Assert _ ==> expected_key_table
endfunction




function s:test_ku_file_key_table_0002()  "{{{1
  let expected_key_table = s:expected_key_table
  Title let _ = ku#file#key_table('xyzzy')  " {ext} is not used.
  Assert type(_) ==> type({})
  Assert _ ==> expected_key_table
endfunction




" Entities which are not tested yet  "{{{1
"
" API
" ku#file#acc_valid_p(source_name_ext, item, sep)
" ku#file#gather_items(source_name_ext, pattern)
" ku#file#on_source_enter(source_name_ext)
" ku#file#special_char_p(source_name_ext, char)
"
" Actions
" s:open(bang, item)
" ku#file#action_open(item)
" ku#file#action_open_x(item)




Test  "{{{1

" __END__
" vim: filetype=vim foldmethod=marker
