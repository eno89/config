" Test: vim-ku-source-buffer action
"
" Notes:
" - To test deleting action, we have to name a buffer to be deleted to avoid
"   unexpected behavior.  Because Vim maybe reuse deleted buffer or remove
"   buffer-local information if a deleted buffer is unnamed.
runtime! plugin/ku.vim plugin/ku/kind/buffer.vim plugin/ku/source/buffer.vim
call vspec#hint({'sid': 'ku#action#buffer#_sid_prefix()'})
function s:describe__ku_action_buffer_delete__modified_buffer()  "{{{1
  It requires the following initialization

  " -------------
  " | 3         |
  " |-----------|
  " | 2 target  |
  " |-----------|
  " | 1 current |
  " -------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  normal! Automata are automata.
  silent new `=tempname()`
  wincmd b
  let winrestcmd_c = winrestcmd()

  It should fail

  let candidate = {'word': 'xxx', 'ku_buffer_nr': bufnr_2}
  silent! let _ = ku#action#buffer#delete(candidate)
  Should _ isnot 0
  Should _ =~# '\<E516:'

  Should winrestcmd() ==# winrestcmd_c
  Should bufnr('') == bufnr_1
  Should bufexists(bufnr_2) == 1
  Should buflisted(bufnr_2) == 1
  Should bufloaded(bufnr_2) == 1
  Should getbufvar(bufnr_2, 'test') ==# 'Quartett!'

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__ku_action_buffer_delete__no_ku_buffer_nr()  "{{{1
  It requires the following initialization

  silent new `='Railgun'`
  let bufnr_1 = bufnr('')
  Should bufname(bufnr_1) ==# 'Railgun'
  only
  silent new `='Mikoto Misaka'`
  let bufnr_2 = bufnr('')
  Should bufname(bufnr_2) ==# 'Mikoto Misaka'
  silent new `='*bbbbb*'`
  let bufnr_3 = bufnr('')
  Should bufname(bufnr_3) ==# '*bbbbb*'
  new
  let bufnr_4 = bufnr('')

  It should succeed if there is a corresponding buffer

  Should bufnr('') == bufnr_4
  Should ku#action#buffer#delete({'word': 'Railgun'}) == 0
  Should buflisted(bufnr_1) == 0
  Should ku#action#buffer#delete({'word': 'Mikoto Misaka'}) == 0
  Should buflisted(bufnr_2) == 0
  Should ku#action#buffer#delete({'word': '*bbbbb*'}) == 0
  Should buflisted(bufnr_3) == 0

  It should fail if there is not any corresponding buffer

  silent! let _ = ku#action#buffer#delete({'word': 'Teleporter'})
  Should _ =~# 'There is no corresponding buffer to candidate'
  silent! let _ = ku#action#buffer#delete({'word': 'Kuroko Shirai'})
  Should _ =~# 'There is no corresponding buffer to candidate'
  silent! let _ = ku#action#buffer#delete({'word': '*sssss*'})
  Should _ =~# 'There is no corresponding buffer to candidate'

  It requires to reset side effect

  execute bufnr_1 'bwipeout'
  execute bufnr_2 'bwipeout'
  execute bufnr_3 'bwipeout'
  Should bufexists(bufnr_1) == 0
  Should bufexists(bufnr_2) == 0
  Should bufexists(bufnr_3) == 0
endfunction




function s:describe__ku_action_buffer_delete__unmodified_buffer()  "{{{1
  It requires the following initialization

  " -------------
  " | 3         |
  " |-----------|
  " | 2 target  |
  " |-----------|
  " | 1 current |
  " -------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  silent new `=tempname()`
  wincmd b
  let winrestcmd_c = winrestcmd()

  It should succeed

  Should ku#action#buffer#delete({'word': 'xxx', 'ku_buffer_nr': bufnr_2})
  \ is 0

  Should winrestcmd() !=# winrestcmd_a
  Should winrestcmd() !=# winrestcmd_c
  Should winnr('$') == 2
  Should winnr() == 2
  Should bufnr('') == bufnr_1
  Should bufexists(bufnr_2) == 1
  Should buflisted(bufnr_2) == 0
  Should bufloaded(bufnr_2) == 0
  Should getbufvar(bufnr_2, 'test') ==# ''

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__ku_action_buffer_open__modified_buffer()  "{{{1
  It requires the following initialization

  " --------------------
  " | 3                |
  " |------------------|
  " | 2 target current |
  " |------------------|
  " | 1                |
  " --------------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  normal! Automata are automata.
  silent new `=tempname()`
  2 wincmd w
  let winrestcmd_c = winrestcmd()

  It should fail

  let candidate = {'word': 'xxx', 'ku_buffer_nr': bufnr_1}
  silent! let _ = ku#action#buffer#open(candidate)
  Should _ isnot 0
  Should _ =~# '\<E37:'

  Should winrestcmd() ==# winrestcmd_c
  Should bufnr('') == bufnr_2
  Should bufexists(bufnr_2) == 1
  Should buflisted(bufnr_2) == 1
  Should bufloaded(bufnr_2) == 1
  Should getbufvar(bufnr_2, 'test') ==# 'Quartett!'

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__ku_action_buffer_open__no_ku_buffer_nr()  "{{{1
  It requires the following initialization

  silent new `='Railgun'`
  let bufnr_1 = bufnr('')
  Should bufname(bufnr_1) ==# 'Railgun'
  only
  silent new `='Mikoto Misaka'`
  let bufnr_2 = bufnr('')
  Should bufname(bufnr_2) ==# 'Mikoto Misaka'
  silent new `='*bbbbb*'`
  let bufnr_3 = bufnr('')
  Should bufname(bufnr_3) ==# '*bbbbb*'
  new
  let bufnr_4 = bufnr('')

  It should succeed if there is a corresponding buffer

  Should bufnr('') == bufnr_4
  Should ku#action#buffer#open({'word': 'Railgun'}) == 0
  Should bufnr('') == bufnr_1
  Should ku#action#buffer#open({'word': 'Mikoto Misaka'}) == 0
  Should bufnr('') == bufnr_2
  Should ku#action#buffer#open({'word': '*bbbbb*'}) == 0
  Should bufnr('') == bufnr_3

  It should fail if there is not any corresponding buffer

  Should bufnr('') == bufnr_3
  silent! let _ = ku#action#buffer#open({'word': 'Teleporter'})
  Should _ =~# 'There is no corresponding buffer to candidate'
  Should bufnr('') == bufnr_3
  silent! let _ = ku#action#buffer#open({'word': 'Kuroko Shirai'})
  Should _ =~# 'There is no corresponding buffer to candidate'
  Should bufnr('') == bufnr_3
  silent! let _ = ku#action#buffer#open({'word': '*sssss*'})
  Should _ =~# 'There is no corresponding buffer to candidate'
  Should bufnr('') == bufnr_3

  It requires to reset side effect

  execute bufnr_1 'bwipeout'
  execute bufnr_2 'bwipeout'
  execute bufnr_3 'bwipeout'
  Should bufexists(bufnr_1) == 0
  Should bufexists(bufnr_2) == 0
  Should bufexists(bufnr_3) == 0
endfunction




function s:describe__ku_action_buffer_open__unmodified_buffer()  "{{{1
  It requires the following initialization

  " --------------------
  " | 3                |
  " |------------------|
  " | 2 target current |
  " |------------------|
  " | 1                |
  " --------------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  silent new `=tempname()`
  2 wincmd w
  let winrestcmd_c = winrestcmd()

  It should succeed

  Should ku#action#buffer#open({'word': 'xxx', 'ku_buffer_nr': bufnr_1})
  \ is 0

  Should winrestcmd() ==# winrestcmd_c
  Should winnr('$') == 3
  Should winnr() == 2
  Should bufnr('') == bufnr_1
  Should bufexists(bufnr_2) == 1
  Should buflisted(bufnr_2) == 1
  Should bufloaded(bufnr_2) == 0
  Should getbufvar(bufnr_2, 'test') ==# 'Quartett!'

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__ku_action_buffer_open_x__modified_buffer()  "{{{1
  It requires the following initialization

  " --------------------
  " | 3                |
  " |------------------|
  " | 2 target current |
  " |------------------|
  " | 1                |
  " --------------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  normal! Automata are automata.
  silent new `=tempname()`
  2 wincmd w
  let winrestcmd_c = winrestcmd()

  It should succeed

  let candidate = {'word': 'xxx', 'ku_buffer_nr': bufnr_1}
  Should ku#action#buffer#open_x(candidate) is 0

  Should winrestcmd() ==# winrestcmd_c
  Should winnr('$') == 3
  Should winnr() == 2
  Should bufnr('') == bufnr_1
  Should bufexists(bufnr_2) == 1
  Should buflisted(bufnr_2) == 1
  Should bufloaded(bufnr_2) == 1
  Should getbufvar(bufnr_2, 'test') ==# 'Quartett!'
  Should getbufline(bufnr_2, 1, '$') ==# ['utomata are automata.']

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__ku_action_buffer_open_x__unmodified_buffer()  "{{{1
  It requires the following initialization

  " --------------------
  " | 3                |
  " |------------------|
  " | 2 target current |
  " |------------------|
  " | 1                |
  " --------------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  silent new `=tempname()`
  2 wincmd w
  let winrestcmd_c = winrestcmd()

  It should succeed

  Should ku#action#buffer#open_x({'word': 'xxx', 'ku_buffer_nr': bufnr_1})
  \ is 0

  Should winrestcmd() ==# winrestcmd_c
  Should winnr('$') == 3
  Should winnr() == 2
  Should bufnr('') == bufnr_1
  Should bufexists(bufnr_2) == 1
  Should buflisted(bufnr_2) == 1
  Should bufloaded(bufnr_2) == 0
  Should getbufvar(bufnr_2, 'test') ==# 'Quartett!'

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__ku_action_buffer_unload__modified_buffer()  "{{{1
  It requires the following initialization

  " -------------
  " | 3         |
  " |-----------|
  " | 2 target  |
  " |-----------|
  " | 1 current |
  " -------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  normal! Automata are automata.
  silent new `=tempname()`
  wincmd b
  let winrestcmd_c = winrestcmd()

  It should fail

  let candidate = {'word': 'xxx', 'ku_buffer_nr': bufnr_2}
  silent! let _ = ku#action#buffer#unload(candidate)
  Should _ isnot 0
  Should _ =~# '\<E515:'

  Should winrestcmd() ==# winrestcmd_c
  Should bufnr('') == bufnr_1
  Should bufexists(bufnr_2) == 1
  Should buflisted(bufnr_2) == 1
  Should bufloaded(bufnr_2) == 1
  Should getbufvar(bufnr_2, 'test') ==# 'Quartett!'

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__ku_action_buffer_unload__unmodified_buffer()  "{{{1
  It requires the following initialization

  " -------------
  " | 3         |
  " |-----------|
  " | 2 target  |
  " |-----------|
  " | 1 current |
  " -------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  silent new `=tempname()`
  wincmd b
  let winrestcmd_c = winrestcmd()

  It should succeed

  Should ku#action#buffer#unload({'word': 'xxx', 'ku_buffer_nr': bufnr_2})
  \ is 0

  Should winrestcmd() !=# winrestcmd_a
  Should winrestcmd() !=# winrestcmd_c
  Should winnr('$') == 2
  Should winnr() == 2
  Should bufnr('') == bufnr_1
  Should bufexists(bufnr_2) == 1
  Should buflisted(bufnr_2) == 1
  Should bufloaded(bufnr_2) == 0
  Should getbufvar(bufnr_2, 'test') ==# 'Quartett!'

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__ku_action_buffer_wipeout__modified_buffer()  "{{{1
  It requires the following initialization

  " -------------
  " | 3         |
  " |-----------|
  " | 2 target  |
  " |-----------|
  " | 1 current |
  " -------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  normal! Automata are automata.
  silent new `=tempname()`
  wincmd b
  let winrestcmd_c = winrestcmd()

  It should fail

  let candidate = {'word': 'xxx', 'ku_buffer_nr': bufnr_2}
  silent! let _ = ku#action#buffer#wipeout(candidate)
  Should _ isnot 0
  Should _ =~# '\<E517:'

  Should winrestcmd() ==# winrestcmd_c
  Should bufnr('') == bufnr_1
  Should bufexists(bufnr_2) == 1
  Should buflisted(bufnr_2) == 1
  Should bufloaded(bufnr_2) == 1
  Should getbufvar(bufnr_2, 'test') ==# 'Quartett!'

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__ku_action_buffer_wipeout__unmodified_buffer()  "{{{1
  It requires the following initialization

  " -------------
  " | 3         |
  " |-----------|
  " | 2 target  |
  " |-----------|
  " | 1 current |
  " -------------
  let bufnr_1 = bufnr('')
  let winrestcmd_a = winrestcmd()
  silent new `=tempname()`
  let bufnr_2 = bufnr('')
  let winrestcmd_b = winrestcmd()
  let b:test = 'Quartett!'
  silent new `=tempname()`
  wincmd b
  let winrestcmd_c = winrestcmd()

  It should succeed

  Should ku#action#buffer#wipeout({'word': 'xxx', 'ku_buffer_nr': bufnr_2})
  \ is 0

  Should winrestcmd() !=# winrestcmd_a
  Should winrestcmd() !=# winrestcmd_c
  Should winnr('$') == 2
  Should winnr() == 2
  Should bufnr('') == bufnr_1
  Should bufexists(bufnr_2) == 0
  Should buflisted(bufnr_2) == 0
  Should bufloaded(bufnr_2) == 0
  Should getbufvar(bufnr_2, 'test') ==# ''

  It requires to reset side effect

  only!
  enew!
endfunction




function s:describe__s_bufnr_from_candidate__ku_buffer_nr()  "{{{1
  It should return a:candidate.ku_buffer_nr as is

  Should Call('s:bufnr_from_candidate', {'ku_buffer_nr': 20091022}) == 20091022
endfunction




function s:describe__s_bufnr_from_candidate__no_ku_buffer_nr()  "{{{1
  It requires the following initialization

  silent new `='Railgun'`
  let bufnr_1 = bufnr('')
  Should bufname(bufnr_1) ==# 'Railgun'
  only
  silent new `='Mikoto Misaka'`
  let bufnr_2 = bufnr('')
  Should bufname(bufnr_2) ==# 'Mikoto Misaka'
  silent new `='*bbbbb*'`
  let bufnr_3 = bufnr('')
  Should bufname(bufnr_3) ==# '*bbbbb*'

  It should return the bufnr of a buffer corresponding to a:candidate.word

  Should Call('s:bufnr_from_candidate', {'word': 'Railgun'}) == bufnr_1
  Should Call('s:bufnr_from_candidate', {'word': 'Mikoto Misaka'}) == bufnr_2
  Should Call('s:bufnr_from_candidate', {'word': '*bbbbb*'}) == bufnr_3

  It requires to reset side effect

  execute bufnr_1 'bwipeout'
  execute bufnr_2 'bwipeout'
  execute bufnr_3 'bwipeout'
  Should bufexists(bufnr_1) == 0
  Should bufexists(bufnr_2) == 0
  Should bufexists(bufnr_3) == 0
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
