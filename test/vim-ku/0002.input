" Test for misc. utilities
let s:SID_PREFIX = ku#_sid_prefix()  "{{{1
function Call(function_name, ...)
  return call(substitute(a:function_name, '^s:', s:SID_PREFIX, ''), a:000)
endfunction




function s:test_calculate_available_sources_0001()  "{{{1
  let expected_sources = [
  \     'args',
  \     'buffer',
  \     'bundle',
  \     'file',
  \     'history',
  \     'metarw/git',
  \     'myproject',
  \     'quickfix',
  \     'source',
  \   ]
  Title let _ = Call('s:calculate_available_sources')  " Normal
  Assert type(_) ==> type([])
  Assert _ ==> expected_sources
endfunction




function s:test_calculate_available_sources_0002()  "{{{1
  let expected_sources = []
  let original_runtimepath = &runtimepath
  set runtimepath=
  Title let _ = Call('s:calculate_available_sources')  " empty 'runtimepath'
  let &runtimepath = original_runtimepath
  Assert type(_) ==> type([])
  Assert _ ==> expected_sources
endfunction




function s:test_calculate_available_sources_0003()  "{{{1
  let expected_sources = [
  \     'args',
  \     'buffer',
  \     'bundle',
  \     'file',
  \     'history',
  \     'metarw/git',
  \     'myproject',
  \     'quickfix',
  \     'source',
  \   ]
  let original_runtimepath = &runtimepath
  let &runtimepath .= ',' . original_runtimepath
  Title let _ = Call('s:calculate_available_sources')  " conflict on sources
  let &runtimepath = original_runtimepath
  Assert type(_) ==> type([])
  Assert _ ==> expected_sources
endfunction




function s:test_contains_the_prompt_p_0001()  "{{{1
  Title let _ = Call('s:contains_the_prompt_p', 'foo')
  Assert type(_) ==> type(0)
  Assert _ ==> 0
endfunction




function s:test_contains_the_prompt_p_0002()  "{{{1
  Title let _ = Call('s:contains_the_prompt_p', '>foo')
  Assert type(_) ==> type(0)
  Assert _ ==> 1
endfunction




function s:test_contains_the_prompt_p_0003()  "{{{1
  Title let _ = Call('s:contains_the_prompt_p', '>_<')
  Assert type(_) ==> type(0)
  Assert _ ==> 1
endfunction




function s:test_contains_the_prompt_p_0004()  "{{{1
  Title let _ = Call('s:contains_the_prompt_p', '-->')
  Assert type(_) ==> type(0)
  Assert _ ==> 0
endfunction




function s:test_contains_the_prompt_p_0005()  "{{{1
  Title let _ = Call('s:contains_the_prompt_p', repeat('>', 10))
  Assert type(_) ==> type(0)
  Assert _ ==> 1
endfunction




function s:test_remove_prompt_0001()  "{{{1
  Title let _ = Call('s:remove_prompt', 'foo')
  Assert type(_) ==> type('')
  Assert _ ==> 'foo'
endfunction




function s:test_remove_prompt_0002()  "{{{1
  Title let _ = Call('s:remove_prompt', '>foo')
  Assert type(_) ==> type('')
  Assert _ ==> 'foo'
endfunction




function s:test_remove_prompt_0003()  "{{{1
  Title let _ = Call('s:remove_prompt', '>_<')
  Assert type(_) ==> type('')
  Assert _ ==> '_<'
endfunction




function s:test_remove_prompt_0004()  "{{{1
  Title let _ = Call('s:remove_prompt', '-->')
  Assert type(_) ==> type('')
  Assert _ ==> '-->'
endfunction




function s:test_remove_prompt_0005()  "{{{1
  Title let _ = Call('s:remove_prompt', repeat('>', 10))
  Assert type(_) ==> type('')
  Assert _ ==> repeat('>', 10 - 1)
endfunction




function s:test_split_source_name_0001()  "{{{1
  Title let _ = Call('s:split_source_name', 'base')
  Assert type(_) ==> type([])
  Assert len(_) ==> 2
  Assert _[0] ==> 'base'
  Assert _[1] ==> ''
endfunction




function s:test_split_source_name_0002()  "{{{1
  Title let _ = Call('s:split_source_name', 'base/ext')
  Assert type(_) ==> type([])
  Assert len(_) ==> 2
  Assert _[0] ==> 'base'
  Assert _[1] ==> 'ext'
endfunction




function s:test_split_source_name_0003()  "{{{1
  Title let _ = Call('s:split_source_name', '')
  Assert type(_) ==> type([])
  Assert len(_) ==> 2
  Assert _[0] ==> ''
  Assert _[1] ==> ''
endfunction




function s:test_split_source_name_0004()  "{{{1
  Title let _ = Call('s:split_source_name', 'foo/bar/baz')
  Assert type(_) ==> type([])
  Assert len(_) ==> 2
  Assert _[0] ==> 'foo'
  Assert _[1] ==> 'bar'
endfunction




function s:test_split_source_name_0005()  "{{{1
  Title let _ = Call('s:split_source_name', 'base-only/')
  Assert type(_) ==> type([])
  Assert len(_) ==> 2
  Assert _[0] ==> 'base-only'
  Assert _[1] ==> ''
endfunction




function s:test_split_source_name_0006()  "{{{1
  Title let _ = Call('s:split_source_name', '/ext-only')
  Assert type(_) ==> type([])
  Assert len(_) ==> 2
  Assert _[0] ==> ''
  Assert _[1] ==> 'ext-only'
endfunction




function s:test_uniq_0001()  "{{{1
  let empty_list = []
  Title let _ = Call('s:uniq', empty_list)
  Assert type(_) ==> type([])
  Assert len(_) ==> 0
  Assert _ isnot empty_list ==> 1
endfunction




function s:test_uniq_0002()  "{{{1
  let list_with_an_item = ['x']
  Title let _ = Call('s:uniq', list_with_an_item)
  Assert type(_) ==> type([])
  Assert len(_) ==> 1
  Assert _ isnot list_with_an_item ==> 1
  Assert _ ==> list_with_an_item
endfunction




function s:test_uniq_0003()  "{{{1
  let list_with_many_items = ['a', 'a', 'b', 'b', 'c', 'c']
  Title let _ = Call('s:uniq', list_with_many_items)
  Assert type(_) ==> type([])
  Assert len(_) ==> 3
  Assert _ isnot list_with_many_items ==> 1
  Assert _ ==> ['a', 'b', 'c']
endfunction




function s:test_uniq_0004()  "{{{1
  let list_with_many_items = ['a', 'a', 'b', 'b', 'c', 'd']
  Title let _ = Call('s:uniq', list_with_many_items)
  Assert type(_) ==> type([])
  Assert len(_) ==> 4
  Assert _ isnot list_with_many_items ==> 1
  Assert _ ==> ['a', 'b', 'c', 'd']
endfunction




function s:test_uniq_0005()  "{{{1
  let list_with_many_items = ['z', 'a', 'b', 'b', 'c', 'd']
  Title let _ = Call('s:uniq', list_with_many_items)
  Assert type(_) ==> type([])
  Assert len(_) ==> 5
  Assert _ isnot list_with_many_items ==> 1
  Assert _ ==> ['z', 'a', 'b', 'c', 'd']
endfunction




function s:test_uniq_0006()  "{{{1
  let list_with_many_items = ['a', 'a', 'a', 'a', 'a']
  Title let _ = Call('s:uniq', list_with_many_items)
  Assert type(_) ==> type([])
  Assert len(_) ==> 1
  Assert _ isnot list_with_many_items ==> 1
  Assert _ ==> ['a']
endfunction




function s:test_ku_set_the_current_input_pattern_0001()  "{{{1
  Title let _ = ku#set_the_current_input_pattern('xyzzy')  " ku is not avtive.
  Assert type(_) ==> type(0)
  Assert _ ==> 0
endfunction




"function s:test_ku_set_the_current_input_pattern_0002()  "{{{1
"  " FIXME: It's hard to test stuffs that requrie to start a ku session.
"  Ku file
"  Title let _ = ku#set_the_current_input_pattern('xyzzy')  " ku is avtive.
"  Assert type(_) ==> type('')
"  Assert _ ==> ''
"
"  normal! ^y$
"  Assert @0 ==> '>xyzzy'
"endfunction




function s:test_history_file_0001()  "{{{1
  let origial_runtimepath = &runtimepath
  set runtimepath&
  let default_runtimepath = &runtimepath
  let &runtimepath = origial_runtimepath

  Title let _ = Call('s:history_file')
  Assert type(_) ==> type('')
  Assert &runtimepath ==> 'vim/dot.vim'
  Assert _ ==> split(default_runtimepath, ',')[0] . '/info/ku/history'
endfunction




function s:test_history_file_0002()  "{{{1
  let origial_runtimepath = &runtimepath
  set runtimepath&
  let default_runtimepath = &runtimepath
  let &runtimepath = 'first,second,third'

  Title let _ = Call('s:history_file')
  Assert type(_) ==> type('')
  Assert split(&runtimepath, ',')[0] ==> 'first'
  Assert _ ==> split(default_runtimepath, ',')[0] . '/info/ku/history'

  let &runtimepath = origial_runtimepath
endfunction




" Entities which are not tested yet  "{{{1
"
"   __ has any side effect
"  / _ has any state
" | /
" ||
" ||
" ::
" :: Variables
" ?? ...
" ::
" :: Interface
" ?? ku#available_source_p()
" ?? ku#available_sources()
" ?? ku#command_complete()
" ?? ku#custom_action()
" ?? ku#custom_key()
" ?? ku#custom_prefix()
" ?? ku#custom_priority()
" ?? ku#default_key_mappings()
" ?? ku#do_action()
" ?? ku#get_the_current_input_pattern()
" ?? ku#input_history()
" ?? ku#make_path()
" ?? ku#path_separator()
" ?? ku#restart()
" ?? ku#set_the_current_input_pattern()
" ?? ku#start()
" ?? ku#switch_source()
" ?? s:ku_custom_action_3()
" ?? s:ku_custom_action_4()
" ::
" :: Core
" ?? s:do()
" ?? s:end()
" ?? s:initialize_ku_buffer()
" ?? s:on_CursorMovedI()
" ?? s:on_InsertEnter()
" ?? s:recall_input_history()
" ?? s:switch_current_source()
" ::
" :: Completion
" ?? ku#_omnifunc()
" ?? ku#_omnifunc_profile()
" ?? s:_omnifunc_base_case_pattern()
" ?? s:_omnifunc_cache_key()
" ?? s:_omnifunc_compare_items()
" ?? s:_omnifunc_compare_lists()
" ?? s:_omnifunc_core()
" ::
" :: Autocommands
" ?? ...
" ::
" :: Automatic completion
" ?? s:complete_the_prompt()
" ?? s:text_by_automatic_component_completion()
" ::
" :: Action-related stuffs
" ?? s:choose_action()
" ?? s:do_action()
" ?? s:get_action_function()
" ?? s:list_actions_sorted_by_action()
" ?? s:list_actions_sorted_by_key()
" ::
" :: Default actions
" ?? s:_default_action_Bottom()
" ?? s:_default_action_Left()
" ?? s:_default_action_Right()
" ?? s:_default_action_Top()
" ?? s:_default_action_above()
" ?? s:_default_action_below()
" ?? s:_default_action_cd()
" ?? s:_default_action_default()
" ?? s:_default_action_ex()
" ?? s:_default_action_lcd()
" ?? s:_default_action_left()
" ?? s:_default_action_nop()
" ?? s:_default_action_right()
" ?? s:_default_action_tab_Left()
" ?? s:_default_action_tab_Right()
" ?? s:_default_action_tab_left()
" ?? s:_default_action_tab_right()
" ?? s:with_split()
" ::
" :: Action table
" ?? s:composite_action_table()
" ?? s:custom_action_table()
" ?? s:default_action_table()
" ::
" :: Key table
" ?? s:composite_key_table()
" ?? s:custom_key_table()
" ?? s:default_key_table()
" ::
" :: Prefix table
" ?? s:custom_prefix()
" ?? s:expand_prefix()
" ?? s:expand_prefix3()
" ?? s:prefix_table_for()
" ::
" :: History of inputted patterns
" ?? s:history_add()
" ?? s:history_file()
" ?? s:history_list()
" ?? s:history_load()
" ?? s:history_reload()
" ?? s:history_save()
" ?? ku#_history_added_p()
" ::
" :: Source API wrappers
" ?? s:api_acc_valid_p()
" ?? s:api_action_table()
" ?? s:api_available_sources()
" ?? s:api_gather_items()
" ?? s:api_key_table()
" ?? s:api_on_before_action()
" ?? s:api_on_source_enter()
" ?? s:api_on_source_leave()
" ?? s:api_special_char_p()
" ::
" :: For tests
" xx ku#_local_variables()
" xx ku#_sid_prefix()
" ::
" :: Etc
" oo s:getkey()  # typeahead buffer
" ox s:ni_map()
" xo s:ku_active_p()
" xo s:runtime_files()  # depending on the files in 'runtimepath'
" xo s:sort_sources()
" xx s:_compare_by_time()
" xx s:compare_ignorecase()
" xx s:make_asis_regexp()
" xx s:make_skip_regexp()
" xx s:make_word_regexp()
" xx s:merge_histories()
" xx s:regexp_any_char_of()
" xx s:regexp_not_any_char_of()




Test  "{{{1

" __END__
" vim: filetype=vim foldmethod=marker
