" Test: vim-ku action-common
" Set up  "{{{1

function! Test_action_open(candidate)
  edit `=a:candidate.word`
endfunction


call ku#define_source({
\   'default_action_table': {'open': function('Test_action_open')},
\   'gather_candidates': function('get'),
\   'name': 'action-common',
\ })




function s:describe__ku_action_common_Bottom()  "{{{1
  It should succeed if there is enough room
  It should fail if there is not enough room

  " FIXME: NIY - until ku#take_action() becomes functional.

" " The following is a template to test 'open-with-split' actions.
" " But it's not functional until ku#take_action() is implemented.
" " So that it's disabled at this moment.

" let candidate = {
" \ 'ku__source': ku#available_sources()['action-common'],
" \ 'word': 'something',
" \ }

" " Ordinary case
" "
" " Before:
" " ---------------------
" " |         |         |
" " |    1    |    2    |
" " |(current)|         |
" " |         |         |
" " ---------------------
" "
" " After:
" " ---------------------
" " |    1    |    2    |
" " |-------------------|
" " |         3         |
" " |     (current)     |
" " ---------------------
" silent only
" vsplit
" let original_bufnr = bufnr('')
" Should winnr('$') == 2

" Should ku#action#common#Bottom(candidate) == 0

" Should winnr('$') == 3
" Should bufnr('') != original_bufnr == 1
" Should bufname('') == candidate.word
endfunction




function s:describe__ku_action_common_Left()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_Right()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_Top()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_above()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_below()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_cancel()  "{{{1
  It should always succeed

  Should ku#action#common#cancel({}) == 0
endfunction




function s:describe__ku_action_common_cd()  "{{{1
  let cwd_before = getcwd()

  It should succeed to :cd to a directory
  Should ku#action#common#cd({'word': 'vim'}) == 0
  Should getcwd() ==# cwd_before . '/vim'

  It should succeed to :cd to the directory which contains a file
  Should ku#action#common#cd({'word': 'dot.vim/autoload/ku.vim'}) == 0
  Should getcwd() ==# cwd_before . '/vim/dot.vim/autoload'

  It should fail if there is no such directory
  Should ku#action#common#cd({'word': 'project/rail-gun'}) != 0
  Should getcwd() ==# cwd_before . '/vim/dot.vim/autoload'

  It currently succeed if there is a directory but there is no such file
  Should ku#action#common#cd({'word': 'ku/rail-gun'}) == 0
  Should getcwd() ==# cwd_before . '/vim/dot.vim/autoload/ku'

  " Reset side effect.
  cd `=cwd_before`
  Should getcwd() ==# cwd_before
endfunction




function s:describe__ku_action_common_default()  "{{{1
  It should behave as same as action 'open'
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_ex()  "{{{1
  It should succeed with fnameescape(x) ==# x

  Should ku#action#common#ex({'word': 'vim'}) == 0
  Should nr2char(getchar(0)) ==# ':'
  Should nr2char(getchar(0)) ==# ' '
  Should nr2char(getchar(0)) ==# 'v'
  Should nr2char(getchar(0)) ==# 'i'
  Should nr2char(getchar(0)) ==# 'm'
  Should nr2char(getchar(0)) ==# "\<C-b>"
  Should nr2char(getchar(0)) ==# ''

  It should succeed with fnameescape(x) !=# x

  Should ku#action#common#ex({'word': 'v i'}) == 0
  Should nr2char(getchar(0)) ==# ':'
  Should nr2char(getchar(0)) ==# ' '
  Should nr2char(getchar(0)) ==# 'v'
  Should nr2char(getchar(0)) ==# "\\"
  Should nr2char(getchar(0)) ==# ' '
  Should nr2char(getchar(0)) ==# 'i'
  Should nr2char(getchar(0)) ==# "\<C-b>"
  Should nr2char(getchar(0)) ==# ''
endfunction




function s:describe__ku_action_common_lcd()  "{{{1

  let cwd_before = getcwd()
  split

  It should succeed :lcd to a directory

  Should ku#action#common#lcd({'word': 'vim'}) == 0
  Should getcwd() ==# cwd_before . '/vim'
  wincmd w
  Should getcwd() ==# cwd_before
  wincmd w

  It should succeed to :lcd to the directory which contains a file

  Should ku#action#common#lcd({'word': 'dot.vim/autoload/ku.vim'}) == 0
  Should getcwd() ==# cwd_before . '/vim/dot.vim/autoload'
  wincmd w
  Should getcwd() ==# cwd_before
  wincmd w

  It should fail if there is no such directory

  Should ku#action#common#lcd({'word': 'project/rail-gun'}) != 0
  Should getcwd() ==# cwd_before . '/vim/dot.vim/autoload'
  wincmd w
  Should getcwd() ==# cwd_before
  wincmd w

  It currently succeed if there is a directory but there is no such file

  Should ku#action#common#lcd({'word': 'ku/rail-gun'}) == 0
  Should getcwd() ==# cwd_before . '/vim/dot.vim/autoload/ku'
  wincmd w
  Should getcwd() ==# cwd_before
  wincmd w

  " Reset side effect.
  only
  cd `=cwd_before`
  Should getcwd() ==# cwd_before
endfunction




function s:describe__ku_action_common_left()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_open()  "{{{1
  It should always fail

  " This action is a fallback to notice the action 'default' for a kind is not
  " defined (because the action must be defined), so that it always fails.
  Should ku#action#common#open({}) != 0
endfunction




function s:describe__ku_action_common_right()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_select()  "{{{1
  It should always succeed
  " FIXME: NIY - until ku#restart() becomes functional.
endfunction




function s:describe__ku_action_common_tab_Left()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_tab_Right()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_tab_left()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




function s:describe__ku_action_common_tab_right()  "{{{1
  It should succeed if there is enough room
  " FIXME: NIY - until ku#take_action() becomes functional.
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker

