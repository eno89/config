" Test: vim-ku core-internal-action
runtime! plugin/ku.vim plugin/ku/**/*.vim
call vspec#hint({'scope': 'ku#_local_variables()', 'sid': 'ku#_sid_prefix()'})
function s:describe__s_choose_action()  "{{{1
  It requires that there is no character in the typeahead buffer

  let typeahead = ''
  while getchar(1) isnot 0
    let typeahead .= nr2char(getchar())
  endwhile
  Should typeahead ==# ''

  It should return the name of an action corresponding to a typed key

  let candidate = {
  \   'ku__source': {
  \     'name': 'dummy',
  \     'kinds': [Ref('s:available_kinds')['common']],
  \   },
  \   'word': 'close your eyes',
  \ }

  call feedkeys('/')
  Should Call('s:choose_action', candidate) ==# 'cd'
  Should nr2char(getchar(0)) ==# ''

  call feedkeys('H')
  Should Call('s:choose_action', candidate) ==# 'Left'
  Should nr2char(getchar(0)) ==# ''

  It should return 0 if there is no suitable action for a typed key

  call feedkeys('???')
  Should Call('s:choose_action', candidate) == 0
  Should nr2char(getchar(0)) ==# ''

  " Reset side effect.
    " Ensure empty typeahead buffer.
  let typeahead = ''
  while getchar(1) isnot 0
    let typeahead .= nr2char(getchar())
  endwhile
  Should typeahead == ''
    " Implicit changes in the script context.
  ResetContext
endfunction




function s:describe__s_custom_action_1()  "{{{1
  It should succeed to define an action

  Should Call('s:custom_kind_action_table', 'file') ==# {}
  Should Call('s:custom_action_1', 'file', 'ai', function('len')) == 0
  Should Call('s:custom_kind_action_table', 'file') ==# {'ai': function('len')}
  Should Ref('s:custom_kind_action_tables') ==# {'file':{'ai':function('len')}}

  It should succeed to override an existing action

  Should Call('s:custom_action_1', 'file', 'ai', function('get'))
  \ == function('len')
  Should Call('s:custom_kind_action_table', 'file') ==# {'ai': function('get')}
  Should Ref('s:custom_kind_action_tables') ==# {'file':{'ai':function('get')}}

  ResetContext
endfunction




function s:describe__s_custom_action_2()  "{{{1
  It should fail for error cases

  Should Call('s:custom_action_2', 'file', 'name1', 'kind2', 'name2') == 0
  Should ku#define_kind({
  \ 'default_action_table': {'get': function('get'), 'len': function('len')},
  \ 'default_key_table': {'g': 'get'},
  \ 'name': 'file',
  \ }) == 1
  Should Call('s:custom_action_2', 'file', 'name1', 'file', 'name2') == 0

  It should succeed to define an action

  Should Call('s:custom_kind_action_table', 'file') ==# {}

  Should Call('s:custom_action_2', 'file', 'default', 'file', 'get') == 0

  Should Call('s:custom_kind_action_table', 'file')
  \ ==# {'default': function('get')}
  Should Ref('s:custom_kind_action_tables')
  \ ==# {'file': {'default': function('get')}}

  It should succeed to override an existing action

  Should Call('s:custom_action_2', 'file', 'default', 'file', 'len')
  \ == function('get')

  Should Call('s:custom_kind_action_table', 'file')
  \ ==# {'default': function('len')}
  Should Ref('s:custom_kind_action_tables')
  \ ==# {'file': {'default': function('len')}}

  ResetContext
endfunction




function s:describe__s_custom_kind_action_table()  "{{{1
  It should succeed with valid name "file"

  let custom_file_action_table = Call('s:custom_kind_action_table', 'file')
  Should custom_file_action_table ==# {}
  Should Ref('s:custom_kind_action_tables') ==# {'file': {}}
  let custom_file_action_table_2 = Call('s:custom_kind_action_table', 'file')
  Should custom_file_action_table is custom_file_action_table_2
  Should Ref('s:custom_kind_action_tables') ==# {'file': {}}

  It currently accepts invalid name "!@#$%"

  let custom_xxxxx_action_table = Call('s:custom_kind_action_table', '!@#$%')
  Should custom_xxxxx_action_table ==# {}
  Should Ref('s:custom_kind_action_tables') ==# {'file': {}, '!@#$%': {}}
  let custom_xxxxx_action_table_2 = Call('s:custom_kind_action_table', '!@#$%')
  Should custom_xxxxx_action_table is custom_xxxxx_action_table_2
  Should Ref('s:custom_kind_action_tables') ==# {'file': {}, '!@#$%': {}}

  It should create different custom kind action tables

  Should custom_file_action_table isnot custom_xxxxx_action_table

  ResetContext
endfunction




function s:describe__s_default_kind_action_table()  "{{{1
  It should return {} for a kind which is not defined

  Should Call('s:default_kind_action_table', 'buffer') ==# {}

  It should return the default action table

  let kind_a = {
  \ 'default_action_table': {'close': function('type')},
  \ 'default_key_table': {'c': 'close'},
  \ 'name': 'buffer',
  \ }
  Should ku#define_kind(kind_a) == 1

  Should Call('s:default_kind_action_table', 'buffer')
  \ ==# {'close': function('type')}
  Should Call('s:default_kind_action_table', 'buffer')
  \ is kind_a.default_action_table

  ResetContext
endfunction




function s:describe__s_find_action()  "{{{1
  " The followings kinds-s are invalid but it's enough to test.
  let kinds_empty = []
  let kinds_test = [{'name': 'test'}]
  let kinds_practical = [{'name': 'source/test'},
  \                      {'name': 'test'},
  \                      {'name': 'common'}]

  It should always return 0 for 'kinds' with no kind definition
  " -- Although such case is not occured in practical use.

  Should Call('s:find_action', 'default', kinds_empty) == 0
  Should Call('s:find_action', 'open', kinds_empty) == 0
  Should Call('s:find_action', 'nop', kinds_empty) == 0
  Should Call('s:find_action', 'nothing', kinds_empty) == 0

  It should succeed for 'kinds' with a usual kind definition
  " -- Although such case is not occured in practical use.

  Should Call('s:find_action', 'default', kinds_test) == 0
  Should Call('s:find_action', 'open', kinds_test) == 0
  Should Call('s:find_action', 'nop', kinds_test) == 0
  Should Call('s:find_action', 'nothing', kinds_test) == 0

  It should succeed for 'kinds' with practical kind definitions

  Should Call('s:find_action', 'default', kinds_practical)
  \ == function('ku#action#common#default')
  Should Call('s:find_action', 'open', kinds_practical)
  \ == function('ku#action#common#open')
  Should Call('s:find_action', 'nop', kinds_practical) == 0
  Should Call('s:find_action', 'nothing', kinds_practical) == 0

  It should return custom actions rather than default actions

  Should ku#custom_action('common', 'default', 'common', 'above') == 0
  Should ku#custom_action('test', 'default', 'common', 'left') == 0
  Should ku#custom_action('test', 'nop', 'common', 'below') == 0
  Should ku#custom_action('test', 'nothing', 'common', 'right') == 0

  Should Call('s:find_action', 'default', kinds_practical)
  \ == function('ku#action#common#left')
  Should Call('s:find_action', 'open', kinds_practical)
  \ == function('ku#action#common#open')
  Should Call('s:find_action', 'nop', kinds_practical)
  \ == function('ku#action#common#below')
  Should Call('s:find_action', 'nothing', kinds_practical)
  \ == function('ku#action#common#right')

  ResetContext
endfunction




function s:describe__s_list_action_tables()  "{{{1
  It requires the following initialization

  let kind_a = {
  \   'default_action_table': {'default': function('type')},
  \   'default_key_table': {'d': 'default'},
  \   'name': 'A',
  \ }
  let kind_b = {
  \   'default_action_table': {'default': function('get')},
  \   'default_key_table': {'d': 'default'},
  \   'name': 'B',
  \ }
  let kind_c = {
  \   'default_action_table': {'default': function('len')},
  \   'default_key_table': {'d': 'default'},
  \   'name': 'C',
  \ }
  Should ku#define_kind(kind_a) == 1
  Should ku#define_kind(kind_b) == 1
  Should ku#define_kind(kind_c) == 1

  It should return action tables for given kinds in proper order

  Should Call('s:list_action_tables', [kind_a, kind_b, kind_c])
  \ == [
  \    Call('s:custom_kind_action_table', kind_a.name),
  \    Call('s:default_kind_action_table', kind_a.name),
  \    Call('s:custom_kind_action_table', kind_b.name),
  \    Call('s:default_kind_action_table', kind_b.name),
  \    Call('s:custom_kind_action_table', kind_c.name),
  \    Call('s:default_kind_action_table', kind_c.name),
  \ ]

  " Reset side effect.
  ResetContext
endfunction




function s:describe__s_list_key_bindings_sorted_by_action_name()  "{{{1
  " BUGS: ad hoc checking
  It should output key bindings in a given a:key_table

  let key_table = {
  \   '4': 'teleporter',
  \   '5': 'railgun',
  \ }

  redir => message
  silent call Call('s:list_key_bindings_sorted_by_action_name', key_table)
  redir END

  Should message =~# '\<4\>'
  Should message =~# '\<teleporter\>'
  Should message =~# '\<5\>'
  Should message =~# '\<railgun\>'
endfunction




function s:describe__s_guess_candidate()  "{{{1
  " FIXME: NIY
endfunction




" __END__  "{{{1
" vim: filetype=vim foldmethod=marker
