===== "ku#omnifunc()"
TEST: nr2char(getchar(0))  ==>  'A' ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
TEST: ku#omnifunc(1, '')  ==>  1 ... ok
TEST: ku#omnifunc(1, '')  ==>  1 ... ok
TEST: ku#omnifunc(1, '')  ==>  0 ... ok
TEST: ku#omnifunc(1, '')  ==>  0 ... ok
TEST: nr2char(getchar(0))  ==>  'A' ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
TEST: ku#omnifunc(0, 'pattern')  ==>  [] ... ok
TEST: ku#define_source(source)  ==>  1 ... ok
TEST: nr2char(getchar(0))  ==>  'A' ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
TEST: ku#omnifunc(0, 'pattern')  ==>  [{'word': 'pattern', 'abbr': 'pa'}] ... ok
TEST: nr2char(getchar(0))  ==>  'A' ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
Result: 15 / 15

===== "s:candidates_from_pattern()"
TEST: Call('s:candidates_from_pattern', '2330', [])  ==>  [] ... ok
TEST: Call('s:candidates_from_pattern', '2330', [source_a])  ==>  [{'word': '2330'}] ... ok
TEST: Call('s:candidates_from_pattern', '2330', [source_a, source_b])  ==>  [{'word': '2330'}, {'word': 'b'}, {'word': 'B'}] ... ok
TEST: Call('s:candidates_from_pattern','2330',[source_a,source_b,source_a])  ==>  [{'word': '2330'}, {'word': 'b'}, {'word': 'B'}, {'word': '2330'}] ... ok
TEST: Call('s:candidates_from_pattern', '2330', [source_c])  ==>  [{'word': 'p'}, {'word': 'u'}] ... ok
TEST: Call('s:candidates_from_pattern', '2330', [source_c, source_b])  ==>  [{'word': 'p'}, {'word': 'u'}, {'word': 'b'}, {'word': 'B'}] ... ok
Result: 6 / 6

===== "s:filter_candidates()"
TEST: Call('s:filter_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_EMPTY)  ==>  [ {'word': 'a'}, {'word': 'lm'}, {'word': 'bcd'}, {'word': 'uvwx'}, {'word': 'mnopq'}, ] ... ok
TEST: Call('s:filter_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_M)  ==>  [ {'word': 'lm'}, {'word': 'mnopq'}, ] ... ok
TEST: Call('s:filter_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_ODD)  ==>  [ {'word': 'a'}, {'word': 'bcd'}, {'word': 'mnopq'}, ] ... ok
TEST: Call('s:filter_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_M_ODD)  ==>  [ {'word': 'mnopq'}, ] ... ok
TEST: Call('s:filter_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_ODD_M)  ==>  Call('s:filter_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_M_ODD) ... ok
Result: 5 / 5

===== "s:matched_candidates()"
TEST: Call('s:matched_candidates', copy(RAW_LCANDIDATES), ARGS,SOURCE_EMPTY)  ==>  [ ] ... ok
TEST: Call('s:matched_candidates',copy(RAW_LCANDIDATES),ARGS,SOURCE_DEFAULT)  ==>  [ {'word': 'mk'}, {'word': 'oom'}, ] ... ok
TEST: Call('s:matched_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_ODD)  ==>  [ {'word': 'iue'}, {'word': 'oom'}, ] ... ok
TEST: Call('s:matched_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_D_O)  ==>  [ {'word': 'mk'}, {'word': 'oom'}, {'word': 'iue'}, {'word': 'oom'}, ] ... ok
Result: 4 / 4

===== "s:sort_candidates()"
TEST: Call('s:sort_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_EMPTY)  ==>  [ {'word': 'a'}, {'word': 'l'}, {'word': 'b'}, {'word': 'u'}, {'word': 'm'}, ] ... ok
TEST: Call('s:sort_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_SIMPLE)  ==>  [ {'word': 'a'}, {'word': 'b'}, {'word': 'l'}, {'word': 'm'}, {'word': 'u'}, ] ... ok
TEST: Call('s:sort_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_REVERSE)  ==>  [ {'word': 'm'}, {'word': 'u'}, {'word': 'b'}, {'word': 'l'}, {'word': 'a'}, ] ... ok
TEST: Call('s:sort_candidates', copy(RAW_LCANDIDATES), ARGS, SOURCE_S_R)  ==>  [ {'word': 'u'}, {'word': 'm'}, {'word': 'l'}, {'word': 'b'}, {'word': 'a'}, ] ... ok
Result: 4 / 4

===== Total
Result: 34 / 34
