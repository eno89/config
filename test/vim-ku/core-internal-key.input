" Test: vim-ku core-internal-key
" Set up  "{{{1

let s:SID_PREFIX = ku#_sid_prefix()

function Call(function_name, ...)
  return call(substitute(a:function_name, '^s:', s:SID_PREFIX, ''), a:000)
endfunction


let s:VARS = ku#_local_variables()

function! Ref(variable_name)
  return s:VARS[a:variable_name]
endfunction

function! Set(variable_name, value)
  let s:VARS[a:variable_name] = a:value
endfunction


command! NewBuffer  bwipeout! | enew!




function s:test_s_custom_kind_key_table()  "{{{1
  Title "s:custom_kind_key_table()"

  " Initialize.
  call Set('custom_kind_key_tables', {})
  Assert Ref('custom_kind_key_tables') ==> {}

  " Refer the custom key table for "buffer" - valid name.
  let custom_buffer_key_table = Call('s:custom_kind_key_table', 'buffer')
  Assert custom_buffer_key_table ==> {}
  Assert Ref('custom_kind_key_tables') ==> {'buffer': {}}
  let custom_buffer_key_table_2 = Call('s:custom_kind_key_table', 'buffer')
  Assert custom_buffer_key_table is custom_buffer_key_table_2 ==> 1
  Assert Ref('custom_kind_key_tables') ==> {'buffer': {}}

  " Refer the custom key table for "!@#$%" - invalid name but not checked.
  let custom_xxxxx_key_table = Call('s:custom_kind_key_table', '!@#$%')
  Assert custom_xxxxx_key_table ==> {}
  Assert Ref('custom_kind_key_tables') ==> {'buffer': {}, '!@#$%': {}}
  let custom_xxxxx_key_table_2 = Call('s:custom_kind_key_table', '!@#$%')
  Assert custom_xxxxx_key_table is custom_xxxxx_key_table_2 ==> 1
  Assert Ref('custom_kind_key_tables') ==> {'buffer': {}, '!@#$%': {}}

  " Both custom kind key tables are not the same one.
  Assert custom_buffer_key_table isnot custom_xxxxx_key_table ==> 1

  " Reset side effect.
  call Set('custom_kind_key_tables', {})
  Assert Ref('custom_kind_key_tables') ==> {}
endfunction




function s:test_s_get_key()  "{{{1
  Title "s:get_key()"

  " Drop all characters in the typeahead buffer.
  let typeahead = ''
  while getchar(1) isnot 0
    let typeahead .= getchar()
  endwhile
    " Assumption: There is no character in the typeahead buffer.
  Assert typeahead ==> ''

  " Case 1: Ordinary key.
  call feedkeys('a')
  Assert Call('s:get_key') ==> 'a'

  " Case 2: Special key.
  call feedkeys("\<F1>")
  Assert Call('s:get_key') ==> "\<F1>"

  " Case 3: But its internal...
  call feedkeys('Sasara')
  Assert Call('s:get_key') ==> 'Sasara'
endfunction




Test  "{{{1

" __END__
" vim: filetype=vim foldmethod=marker
