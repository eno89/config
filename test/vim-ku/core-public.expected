===== "ku#custom_action()"
TEST: Ref('custom_kind_action_tables')  ==>  {} ... ok
TEST: ku#define_kind({ 'default_action_table': {'get': function('get'), 'len': function('len')}, 'default_key_table': {'g': 'get'}, 'name': 'file', })  ==>  1 ... ok
TEST: Ref('available_kinds')  ==>  { 'file': { 'default_action_table': {'get': function('get'), 'len': function('len')}, 'default_key_table': {'g': 'get'}, 'name': 'file', }, } ... ok
TEST: ku#custom_action('file', 'ai', function('len'))  ==>  0 ... ok
TEST: ku#custom_action('file', 'ai', function('get'))  ==>  function('len') ... ok
TEST: ku#custom_action('file', 'default', 'file', 'get')  ==>  0 ... ok
TEST: ku#custom_action('file', 'default', 'file', 'get')  ==>  function('get') ... ok
TEST: ku#custom_action('file', 'new', 'file', 'get', '')  ==>  0 ... ok
TEST: ku#custom_action('file', 'new', 'file', 'get', '')  ==>  function('get') ... ok
TEST: Ref('custom_kind_action_tables')  ==>  { 'file': { 'ai': function('get'), 'default': function('get'), 'new': function('get'), }, } ... ok
TEST: Ref('available_kinds')  ==>  { 'file': { 'default_action_table': {'get': function('get'), 'len': function('len')}, 'default_key_table': {'g': 'get'}, 'name': 'file', }, } ... ok
TEST: Ref('custom_kind_action_tables')  ==>  {} ... ok
TEST: Ref('available_kinds')  ==>  {} ... ok
Result: 13 / 13

===== "ku#custom_key()"
TEST: Ref('custom_kind_key_tables')  ==>  {} ... ok
TEST: ku#custom_key('buffer', '<', 'lt')  ==>  0 ... ok
TEST: Call('s:custom_kind_key_table', 'buffer')  ==>  {'<': 'lt'} ... ok
TEST: ku#custom_key('buffer', '>', 'gt')  ==>  0 ... ok
TEST: Call('s:custom_kind_key_table', 'buffer')  ==>  {'<': 'lt', '>': 'gt'} ... ok
TEST: ku#custom_key('buffer', '<', 'LT')  ==>  'lt' ... ok
TEST: Call('s:custom_kind_key_table', 'buffer')  ==>  {'<': 'LT', '>': 'gt'} ... ok
TEST: ku#custom_key('buffer', '>', 'GT')  ==>  'gt' ... ok
TEST: Call('s:custom_kind_key_table', 'buffer')  ==>  {'<': 'LT', '>': 'GT'} ... ok
TEST: ku#custom_key('!@#$%', '(', 'lb')  ==>  0 ... ok
TEST: Call('s:custom_kind_key_table', '!@#$%')  ==>  {'(': 'lb'} ... ok
TEST: ku#custom_key('!@#$%', ')', 'rb')  ==>  0 ... ok
TEST: Call('s:custom_kind_key_table', '!@#$%')  ==>  {'(': 'lb', ')': 'rb'} ... ok
TEST: ku#custom_key('!@#$%', '(', 'LB')  ==>  'lb' ... ok
TEST: Call('s:custom_kind_key_table', '!@#$%')  ==>  {'(': 'LB', ')': 'rb'} ... ok
TEST: ku#custom_key('!@#$%', ')', 'RB')  ==>  'rb' ... ok
TEST: Call('s:custom_kind_key_table', '!@#$%')  ==>  {'(': 'LB', ')': 'RB'} ... ok
TEST: Ref('custom_kind_key_tables')  ==>  { 'buffer': {'<': 'LT', '>': 'GT'}, '!@#$%': {'(': 'LB', ')': 'RB'}, } ... ok
TEST: Ref('custom_kind_key_tables')  ==>  {} ... ok
Result: 19 / 19

===== "ku#define_default_ui_key_mappings()"
TEST: maparg('<C-c>', 'i')  ==>  'QUIT-INSERT' ... ok
TEST: maparg('<C-c>', 'n')  ==>  'QUIT-NORMAL' ... ok
TEST: maparg('<C-i>', 'i')  ==>  '' ... ok
TEST: maparg('<C-i>', 'n')  ==>  '' ... ok
TEST: maparg('<C-m>', 'i')  ==>  '' ... ok
TEST: maparg('<C-m>', 'n')  ==>  '' ... ok
TEST: maparg('<Enter>', 'i')  ==>  '' ... ok
TEST: maparg('<Enter>', 'n')  ==>  '' ... ok
TEST: maparg('<Return>', 'i')  ==>  '' ... ok
TEST: maparg('<Return>', 'n')  ==>  '' ... ok
TEST: maparg('<Tab>', 'i')  ==>  '' ... ok
TEST: maparg('<Tab>', 'n')  ==>  '' ... ok
TEST: maparg('<C-c>', 'i')  ==>  'QUIT-INSERT' ... ok
TEST: maparg('<C-c>', 'n')  ==>  'QUIT-NORMAL' ... ok
TEST: maparg('<C-i>', 'i')  ==>  '<Plug>(ku-choose-and-do-an-action)' ... ok
TEST: maparg('<C-i>', 'n')  ==>  '<Plug>(ku-choose-and-do-an-action)' ... ok
TEST: maparg('<C-m>', 'i')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<C-m>', 'n')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Enter>', 'i')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Enter>', 'n')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Return>', 'i')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Return>', 'n')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Tab>', 'i')  ==>  '<Plug>(ku-choose-and-do-an-action)' ... ok
TEST: maparg('<Tab>', 'n')  ==>  '<Plug>(ku-choose-and-do-an-action)' ... ok
TEST: maparg('<C-c>', 'i')  ==>  '<Plug>(ku-quit-session)' ... ok
TEST: maparg('<C-c>', 'n')  ==>  '<Plug>(ku-quit-session)' ... ok
TEST: maparg('<C-i>', 'i')  ==>  '<Plug>(ku-choose-and-do-an-action)' ... ok
TEST: maparg('<C-i>', 'n')  ==>  '<Plug>(ku-choose-and-do-an-action)' ... ok
TEST: maparg('<C-m>', 'i')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<C-m>', 'n')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Enter>', 'i')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Enter>', 'n')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Return>', 'i')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Return>', 'n')  ==>  '<Plug>(ku-do-the-default-action)' ... ok
TEST: maparg('<Tab>', 'i')  ==>  '<Plug>(ku-choose-and-do-an-action)' ... ok
TEST: maparg('<Tab>', 'n')  ==>  '<Plug>(ku-choose-and-do-an-action)' ... ok
Result: 36 / 36

===== "ku#define_kind()"
TEST: Ref('available_kinds')  ==>  {} ... ok
Error detected while processing function <SNR>43_cmd_Test..<SNR>44_test_ku_define_kind..ku#define_kind..<SNR>45_valid_key_p:
line    5:
Invalild definition: Without key 'default_action_table'
TEST: ku#define_kind({ 'default_key_table': {}, 'name': 'file', })  ==>  0 ... ok
Invalild definition: Without key 'default_key_table'
TEST: ku#define_kind({ 'default_action_table': {}, 'name': 'file', })  ==>  0 ... ok
Invalild definition: Without key 'name'
TEST: ku#define_kind({ 'default_action_table': {}, 'default_key_table': {}, })  ==>  0 ... ok
line   17:
Invalild definition: Key 'default_action_table' must be dictionary but given value is 0
TEST: ku#define_kind({ 'default_action_table': 0, 'default_key_table': {}, 'name': 'file', })  ==>  0 ... ok
Invalild definition: Key 'default_key_table' must be dictionary but given value is 0
TEST: ku#define_kind({ 'default_action_table': {}, 'default_key_table': 0, 'name': 'file', })  ==>  0 ... ok
Invalild definition: Key 'name' must be string but given value is 0
TEST: ku#define_kind({ 'default_action_table': {}, 'default_key_table': {}, 'name': 0, })  ==>  0 ... ok
TEST: Ref('available_kinds')  ==>  {} ... ok
TEST: ku#define_kind({ 'default_action_table': {'close': function('type')}, 'default_key_table': {'c': 'close'}, 'name': 'buffer', })  ==>  1 ... ok
TEST: ku#define_kind({ 'default_action_table': {'open': function('type')}, 'default_key_table': {'o': 'open'}, 'name': 'file', })  ==>  1 ... ok
TEST: Ref('available_kinds')  ==>  { 'buffer': { 'default_action_table': {'close': function('type')}, 'default_key_table': {'c': 'close'}, 'name': 'buffer' }, 'file': { 'default_action_table': {'open': function('type')}, 'default_key_table': {'o': 'open'}, 'name': 'file' }, } ... ok
TEST: ku#define_kind({ 'default_action_table': {'despair': function('type')}, 'default_key_table': {'d': 'despair'}, 'name': 'file', })  ==>  1 ... ok
TEST: Ref('available_kinds')  ==>  { 'buffer': { 'default_action_table': {'close': function('type')}, 'default_key_table': {'c': 'close'}, 'name': 'buffer' }, 'file': { 'default_action_table': {'despair': function('type')}, 'default_key_table': {'d': 'despair'}, 'name': 'file' }, } ... ok
TEST: Ref('available_kinds')  ==>  {} ... ok
Result: 14 / 14

===== "ku#define_source()"
TEST: Ref('available_sources')  ==>  {} ... ok
TEST: Ref('available_kinds')  ==>  {} ... ok
Error detected while processing function <SNR>43_cmd_Test..<SNR>44_test_ku_define_source..ku#define_source..<SNR>45_valid_key_p:
line    5:
Invalild definition: Without key 'gather_candidates'
TEST: ku#define_source({})  ==>  0 ... ok
line   17:
Invalild definition: Key 'gather_candidates' must be function but given value is 0
TEST: ku#define_source({'gather_candidates': 0, 'name': 0})  ==>  0 ... ok
Invalild definition: Key 'gather_candidates' must be function but given value is 0
TEST: ku#define_source({'gather_candidates': 0, 'name': 'test'})  ==>  0 ... ok
Invalild definition: Key 'name' must be string but given value is 0
TEST: ku#define_source({'gather_candidates': F, 'name': 0})  ==>  0 ... ok
TEST: Ref('available_sources')  ==>  {} ... ok
TEST: Ref('available_kinds')  ==>  {} ... ok
TEST: ku#define_source({'gather_candidates': F, 'name': 'test'})  ==>  1 ... ok
TEST: Ref('available_sources')['test']  ==>  { 'default_action_table': {}, 'default_key_table': {}, 'filters': [], 'gather_candidates': F, 'kinds': ['source/test'], 'matchers': matchers, 'name': 'test', 'sorters': sorters, } ... ok
TEST: Ref('available_kinds')['source/test']  ==>  { 'default_action_table': {}, 'default_key_table': {}, 'name': 'source/test', } ... ok
TEST: ku#define_source({'gather_candidates': G, 'name': 'test'})  ==>  1 ... ok
TEST: Ref('available_sources')['test']  ==>  { 'default_action_table': {}, 'default_key_table': {}, 'filters': [], 'gather_candidates': G, 'kinds': ['source/test'], 'matchers': matchers, 'name': 'test', 'sorters': sorters, } ... ok
TEST: Ref('available_kinds')['source/test']  ==>  { 'default_action_table': {}, 'default_key_table': {}, 'name': 'source/test', } ... ok
TEST: ku#define_source({ 'default_action_table': {'checkout': function('function')}, 'default_key_table': {'/': 'checkout'}, 'filters': [G], 'gather_candidates': F, 'kinds': ['git', 'file'], 'matchers': [G], 'name': 'test', 'sorters': [F]})  ==>  1 ... ok
TEST: Ref('available_sources')['test']  ==>  { 'default_action_table': {'checkout': function('function')}, 'default_key_table': {'/': 'checkout'}, 'filters': [G], 'gather_candidates': F, 'kinds': ['source/test', 'git', 'file'], 'matchers': [G], 'name': 'test', 'sorters': [F], } ... ok
TEST: Ref('available_kinds')['source/test']  ==>  { 'default_action_table': {'checkout': function('function')}, 'default_key_table': {'/': 'checkout'}, 'name': 'source/test', } ... ok
Result: 17 / 17

===== "ku#start()"
TEST: &l:buftype  ==>  '' ... ok
TEST: winnr('$')  ==>  1 ... ok
TEST: winnr()  ==>  1 ... ok
TEST: ku#start()  ==>  1 ... ok
TEST: nr2char(getchar(0))  ==>  'A' ... ok
TEST: nr2char(getchar(0))  ==>  'a' ... ok
TEST: nr2char(getchar(0))  ==>  'b' ... ok
TEST: nr2char(getchar(0))  ==>  'c' ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
TEST: &g:completeopt  ==>  'menu,menuone' ... ok
TEST: &l:filetype  ==>  'ku' ... ok
TEST: [line('.'), col('.')]  ==>  [2, 1] ... ok
TEST: bufnr('') != first_bufnr  ==>  1 ... ok
TEST: getline(1, line('$'))  ==>  ['', '>'] ... ok
TEST: winnr('$')  ==>  2 ... ok
TEST: winnr()  ==>  1 ... ok
TEST: ku#start()  ==>  1 ... ok
TEST: nr2char(getchar(0))  ==>  'A' ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
TEST: bufnr('')  ==>  second_bufnr ... ok
TEST: winnr('$')  ==>  2 ... ok
TEST: winnr()  ==>  1 ... ok
TEST: ku#start()  ==>  1 ... ok
TEST: nr2char(getchar(0))  ==>  'A' ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
TEST: bufnr('') != first_bufnr  ==>  1 ... ok
TEST: bufnr('') != second_bufnr  ==>  1 ... ok
TEST: winnr('$')  ==>  2 ... ok
TEST: winnr()  ==>  1 ... ok
TEST: ku#start()  ==>  1 ... ok
TEST: nr2char(getchar(0))  ==>  'A' ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
TEST: winnr()  ==>  1 ... ok
TEST: winnr('$')  ==>  2 ... ok
Error detected while processing function <SNR>43_cmd_Test..<SNR>44_test_ku_start..ku#start:
line    6:
Invalid source name: 'invalid'
TEST: ku#start(['invalid'])  ==>  0 ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
TEST: bufnr('')  ==>  first_bufnr ... ok
TEST: winnr('$')  ==>  1 ... ok
TEST: winnr()  ==>  1 ... ok
TEST: ku#start(0, 'def')  ==>  1 ... ok
TEST: nr2char(getchar(0))  ==>  'A' ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
TEST: bufnr('') != first_bufnr  ==>  1 ... ok
TEST: getline(1, line('$'))  ==>  ['', '>def'] ... ok
TEST: winnr('$')  ==>  2 ... ok
TEST: winnr()  ==>  1 ... ok
line   12:
Already active
TEST: ku#start()  ==>  0 ... ok
TEST: nr2char(getchar(0))  ==>  '' ... ok
Result: 48 / 48

===== Total
Result: 147 / 147
