#!/usr/bin/env gosh
; melissac - Melissa script to Vim script compiler
; Version: 0.0.0
; Copyright (C) 2009 kana <http://whileimautomaton.net/>
; License: MIT license  {{{1
;     Permission is hereby granted, free of charge, to any person obtaining
;     a copy of this software and associated documentation files (the
;     "Software"), to deal in the Software without restriction, including
;     without limitation the rights to use, copy, modify, merge, publish,
;     distribute, sublicense, and/or sell copies of the Software, and to
;     permit persons to whom the Software is furnished to do so, subject to
;     the following conditions:
; 
;     The above copyright notice and this permission notice shall be included
;     in all copies or substantial portions of the Software.
; 
;     THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
;     OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
;     MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
;     IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
;     CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
;     TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
;     SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.








; API  ;{{{1
(define-module vim-melissa  ;{{{2
  ; (use xxx)
  (export
    compile-vise
    define-vise-syntax
    generate-vim-script
    translate-melissa-expr
    vise-macroexpand
    vise-macroexpand1
    )
  )
(select-module vim-melissa)




(define (compile-vise . vises)  ;{{{2
  ; FIXME: NIY
  )




(define (define-vise-syntax . args)  ;{{{2
  ; FIXME: NIY
  )




(define (ex-command-expr? expr)  ;{{{2
  (and (list? expr) (keyword? (car expr))))




(define (generate-vim-script . vises)  ;{{{2
  (for-each
    (lambda (s)
      (display s)
      (newline))
    (apply compile-vise vises)))




(define (translate-melissa-expr expr)  ;{{{2
  (if (ex-command-expr? expr)
    `(generate-vim-script ',expr)
    expr))




(define (vise-macroexpand form)  ;{{{2
  ; FIXME: NIY
  )




(define (vise-macroexpand1 form)  ;{{{2
  ; FIXME: NIY
  )




(provide "vim-melissa")  ;{{{2








; Predefined Ex commands  ;{{{1

; (define-vise-syntax :XXX XXX XXX)
; ...








; Main  ;{{{1
(select-module user)
(import vim-melissa)

(define (main args)
  (define (nop . args)
    (values))
  (define (melissa-eval expr env)
    (eval (translate-melissa-expr expr) env))

  (read-eval-print-loop #f melissa-eval nop nop)
  0)








; __END__  ;{{{1
; vim: filetype=scheme foldmethod=marker
