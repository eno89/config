*ku.txt*	Support to do something

Version 0.1.0
Copyright (C) 2008 kana <http://whileimautomaton.net/>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*ku-contents*

Introduction		|ku-introduction|
Interface		|ku-interface|
  Commands		  |ku-commands|
  Functions		  |ku-functions|
  Key Mapings		  |ku-key-mappings|
Types			|ku-types|
Customizing		|ku-customizing|
Bugs			|ku-bugs|
Changelog		|ku-changelog|




==============================================================================
INTRODUCTION					*ku-introduction*

Ku is a Vim plugin to provide the interface to choose many items from several
sources with automatic completion and fuzzy pattern matching.

To start selection, use |ku-commands|.  The commands will open a new window
(|ku-window|) to take your input.  As you input some characters, pop-up menu
(|ins-completion-menu|) will be automatically appeared and updated to show the
proper candidates for the input pattern.

						*ku-auto-directory-insertion*
Whenever "/" is typed, the name of an appropriate directory will be
automatically inserted.  This feature is derived from bluewind
<http://cspace.s2.xrea.com/software/bluewind/>.

						*ku-window* *ku-buffer*
ku window		The window which is opened by |ku-commands|.
			This window will be automatically closed when:
			- An action is taken for an item.
			- Selecting is canceled.
			- Another window or another tab page becomes active.




==============================================================================
INTERFACE					*ku-interface*

------------------------------------------------------------------------------
COMMANDS					*ku-commands*

:Ku {source}					*:Ku*
			Start selecting items from {source}.




==============================================================================
FUNCTIONS					*ku-functions*

ku#start({source})				*ku#start()*
			Function version of |:Ku|.

ku#default_key_mappings({override_p})		*ku#default_key_mappings()*
			Define the following key mappings which are local to
			the current buffer in Normal mode and Insert mode.
			Existent key mappings will be override if {override_p}
			is true.

			{lhs}		{rhs}				~
			------------------------------------------------~
			<C-c>		<Plug>(ku-cancel)
			<Return>	<Plug>(ku-do-the-default-action)
			<C-m>		<Plug>(ku-do-the-default-action)
			<Tab>		<Plug>(ku-choose-an-action)
			<C-i>		<Plug>(ku-choose-an-action)
			<C-j>		<Plug>(ku-next-source)
			<C-k>		<Plug>(ku-previous-source)

ku#custom_action({source}, {action}, {function})	*ku#custom_action()*
			Define a new {action} for items from {source}.
			{function} is the name of a function which will be
			called as {action}.

			{source} is the name of a source or "*common*".

ku#custom_key({source}, {key}, {action})	*ku#custom_key()*
			Define a {key} to do the {action} for items from
			{source} in |<Plug>(ku-choose-action)|.

			{source} is the name of a source or "*common*".




==============================================================================
KEY MAPPINGS					*ku-key-mappings*

In the ku window, the following key mappings are defined:

<Plug>(ku-cancel)				*<Plug>(ku-cancel)*
			Cancel selecting (and close the ku window).

<Plug>(ku-do-the-default-action)      	    *<Plug>(ku-do-the-default-action)*
			Do the default action for the current item.

<Plug>(ku-choose-an-action)			*<Plug>(ku-choose-an-action)*
			Show the mesasge on available actions, take a single
			key input, then do the appropriate action.

<Plug>(ku-next-source)				*<Plug>(ku-next-source)*
<Plug>(ku-previous-source)			*<Plug>(ku-previous-source)*
			Change the preferred type (ascending / descending).

The default key mappings are defined by |ku#default_key_mappings()|.




==============================================================================
SOURCES						*ku-sources*

Sources are like kinds of items.  For exmaple, there are "buffer" and "file"
sources are available as the default and sample sources.  With "buffer"
sources, you can choose a buffer by ku.

						*ku-action-table*
Sources have their own action table.  Action table is a dictionary, where
each key is the name of an action, and each value is the name of a function
that implements the action.

						*ku-key-table*
Sources have their own key table.  Key table is a dictionary, where each key
is a single character that represents the key to
|<Plug>(ku-choose-an-action)|, and each value is the name of an action to be
executed by the key.

						*ku-source-api*
Sources are written as autoload scripts which are placed in "autoload/ku/"
directory in 'runtimepath'.  The names of sources are same as their file names
without the ".vim" extension.  Sources must provide the following functions:

ku#{source}#on_start_session()		      *ku#{source}#on_start_session()*
			Function which is called after the ku window is open.

ku#{source}#on_end_session()			*ku#{source}#on_end_session()*
			Function which is called before the ku window is
			closed.

ku#{source}#action_table()			*ku#{source}#action_table()*
			Return the action table of {souce}.

ku#{source}#key_table()				*ku#{source}#key_table()*
			Return the key table of {souce}.

ku#{source}#gather_items({pattern})		*ku#{source}#gather_items()*
			Return a list of items which are matched to the given
			{pattern}.  See |complete-items| for the detail of
			items.

			Sources may add additional entries for each item.
			Keys of such entries must be prefixed with
			"_{source}_", where {source} is the name of a source.

			Also, ku adds additional entries for each item.  Keys
			of such entries are prefixed with "_ku_".  The
			following keys are officially provided:

			Key		Value ~
			---------------	---------------------- ~
			_ku_completed_p	True if the item is completed one,
					false otherwise.




==============================================================================
CUSTOMIZING					*ku-customizing*

User plugin-ku-buffer-initialized		*plugin-ku-buffer-initialize*
	This event is published whenever the ku buffer is created then being
	initialized.  Use this event to do your initialization, for example,
	customize key mappings for the ku buffer.

	Note that if there is no |:autocmd| for this event,
	|ku#default_key_mappings()| will be called.  Otherwise, it will not be
	called.




==============================================================================
BUGS						*ku-bugs*

- Many bugs must be around the world.




==============================================================================
CHANGELOG					*ku-changelog*

0.1.0	2008-07-18T15:23:02+09:00
	- Redesign.

0.0.0	2008-01-25T19:34:13+09:00
	- Derived from buffuzzy and zapit.
	- Still under development.




==============================================================================
vim:tw=78:ts=8:ft=help:norl:fdm=marker:
