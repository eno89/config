*ku.txt*	Support to do something

Version 0.0.0
Copyright (C) 2008 kana <http://nicht.s8.xrea.com/>
License: MIT license (see <http://www.opensource.org/licenses/mit-license>)
$Id$


Introduction			|ku-introduction|
Commands			|ku-commands|
Functions			|ku-functions|
Customizing			|ku-customizing|
Bugs				|ku-bugs|
Changelog			|ku-changelog|




==============================================================================
INTRODUCTION						*ku-introduction*

Ku is a Vim plugin to support to do something on buffer, files, directories or
other kind of items with automatic completion and fuzzy pattern.  You can also
define your own kind of items.

To start selection, use |ku-commands|.  The commands will open a new window
(|ku-window|) to take user input.  As user inputs some characters, pop-up menu
(|ins-completion-menu|) will be automatically appeared and updated to show the
proper candidates for the input pattern.

							*ku-window* *ku-buffer*
ku window		The window which is opened by |ku-commands|.
			This window will be automatically closed when:
			- An action is taken for an item.
			- Selecting is canceled.
			- Another window or another tab page is acticated.




==============================================================================
COMMANDS						*ku-commands*

:Ku[!] [{preferred-type}]				*:Ku*
			Start selecting by ku.
			[bang] modifier will be used by an action.
			{preferred-type} specifies what type of items to be
			appeared in the completion list.  If it is omitted,
			all type of items will be appeared.




==============================================================================
FUNCTIONS						*ku-functions*

ku#start({bang}, [{preferred-type}])			*ku#start()*
			Function version of |:Ku|.

ku#default_key_mappings()			   *ku#default_key_mappings()*
			Define the following key mappings for the ku window
			to the current buffer.

			Modes	{lhs}		{rhs} ~
			ni	<C-c>		<Plug>(ku-cancel)
			ni	<Return>	<Plug>(ku-do-default)
			ni	<Tab>		<Plug>(ku-choose-action)
			ni	<C-j>		<Plug>(ku-next-type)
			ni	<C-k>		<Plug>(ku-previous-type)

ku#bang()						*ku#bang()*
			Return whether [bang] modifier is given for the last
			executed |:Ku| or |ku#start()|.  String "!" will be
			returned if [bang] modifier is given, otherwise an
			empty string will be returned.

ku#register_type({typedef})				*ku#register_type()*
			Register new type which is defined by {typedef}.
			{typedef} is a dictionary.  See |ku-write-new-type|
			for the detail of {typedef}.

			Note that any built-in type can be overridden.

ku#unregister_type({name})
			Unregister the type {name}.

			Note that any built-in type can be unregistered.




==============================================================================
KEY MAPPINGS						*ku-key-mappings*

In the ku window, the following key mappings are defined:

<Plug>(ku-cancel)					*<Plug>(ku-cancel)*
			Cancel selecting (and close the ku window).

<Plug>(ku-do-default)				       *<Plug>(ku-do-default)*
			Do the default action for the current item.

<Plug>(ku-choose-action)			    *<Plug>(ku-choose-action)*
			Show the mesasge on available actions, take a single
			key input, then do the appropriate action.

<Plug>(ku-next-type)					*<Plug>(ku-next-type)*
<Plug>(ku-previous-type)			    *<Plug>(ku-previous-type)*
			Change the preferred type (ascending / descending).

The default key mappings are defined by |ku#default_key_mappings()|.




==============================================================================
TYPES							*ku-types*

Types are kinds of items.  The following types are built-in.

Name		Actions ~
buffer		Open the specified buffer with |:buffer| or |:sbuffer|.
file		Open the specified file with |:edit| or |:new|.




==============================================================================
CUSTOMIZING						*ku-customizing*

Initialization						*ku-initialization*
							*KuBufferInitialize*
	Ku has its own buffer to do its work.  Whenever the buffer is created,
	"User KuBufferInitialize" event will be published.  Use this event to
	do user's initialization for the buffer, for example: >

		autocmd User KuBufferInitialize  call MyOwnInitialization()
<
	If there is no autocommand for |KuBufferInitialize|, Ku will call
	|ku#default_key_mappings()|.

Write New Type						*ku-write-new-type*
	To use new type, call |ku#register_type()| with its {typedef}.
	{typedef} is a dictionary and it contains the following entries:

	'name'		string
		The name of this type.  It consits of only lowercase
		alphabets.

	'actions'	list
		The available actions for items of this type.
		Each value is a dictionary with the following entries:

		'key'		string
			The key to choose this action.
			It will be used by |<Plug>(ku-choose-action)|.

		'name'		string
			The name of this action.  Use short and brief one.

		'function'	funcref
			The function of this action.  It will be called with
			one parameter, the selected item (as described in
			|complete-items|).

		Note that the first entry is treated as the default action for
		items of this type.  So it will be used by
		|<Plug>(ku-do-default)|.

	'gather'	funcref
		The function to gather items matching to the given pattern.
		It is called with one parameter, the user input pattern.
		It must return the list of |complete-items|.

	'initialize'	funcref		(optional)
		The function which will be called with no argument whenever
		the ku window is opened.  The main purpose of this function is
		to do some initialization for 'gather'.




==============================================================================
BUGS							*ku-bugs*

- Many bugs must be around the world.




==============================================================================
CHANGELOG						*ku-changelog*

0.0.0	2008-01-25T19:34:13+09:00
	- Derived from buffuzzy and zapit.
	- Still under development.




==============================================================================
vim:tw=78:ts=8:ft=help:norl:
