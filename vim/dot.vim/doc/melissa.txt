*melissa.txt*	S-expression to Vim script

Version 0.0.0
Script ID: ****
Copyright (C) 2009 kana <http://whileimautomaton.net/>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*melissa-contents*

Introduction		|melissa-introduction|
Interface		|melissa-interface|
  Functions		  |melissa-functions|
  External commands	  |melissa-external-commands|
  Scheme API		  |melissa-scheme-api|
Visp language		|melissa-visp|
Bugs			|melissa-bugs|
Changelog		|melissa-changelog|




==============================================================================
INTRODUCTION					*melissa-introduction*

*melissa* is a Vim plugin to provide a set of features to write Vim script in
its own DSL based on Scheme.  It enables you to write Vim script in
a programmable programming language.


Requirements:
- Vim 7.2 or later
- Gauche 0.8.13 or later

Latest version:
http://github.com/kana/config/commits/vim-melissa




==============================================================================
INTERFACE					*melissa-interface*

------------------------------------------------------------------------------
FUNCTIONS					*melissa-functions*

melissa#compile_file({path})			*melissa#compile_file()*
melissa#compile_string({string})		*melissa#compile_string()*
			Compile a |Melissa-script| into a Vim script,
			then return it as a string.
			You have to pass the result to |:execute|.

			Melissa script can be given as a {string} or a {path}
			to a file that contains a Visp script.


------------------------------------------------------------------------------
EXTERNAL COMMANDS				*melissa-external-commands*

melisssac					*melissac*
			External command to compile a |Melissa-script| into
			a Vim script.  It reads a Melissa script from the
			standard input and it writes the corresponding Vim
			script to the standard output.


------------------------------------------------------------------------------
SCHEME API					*melissa-scheme-api*

(compile-visp {s-exprssion})			*(compile-visp)*
			Compile a |Visp| script, a Vim script written in
			{s-exprssion}, then write the result to the current
			output port.

(define-visp-syntax ...)			*(define-visp-syntax)*
			Define a new syntax for |Visp|.
			XXX




==============================================================================
VISP LANGUAGE					*melissa-visp*

OVERVIEW ~

*Visp* is another form of Vim script which is written in S-expression.
*Melissa-script* is a scheme script to generate a Vim script via Visp.

- An "Ex command" is a list, which contains a keyword or a symbol starting
  with a colon as its first item.

  Example: >
	(:let cait_sith "nekoko")
<
- A Visp script is a list which contains zero or more "Ex commands".

  Example: >
	((:let cait_sith "nekoko")
	 (:echo cait_sith))
<
- To compile a Visp script into a Vim script, use |(compile-visp)|.

  Example: >
	(compile-visp '((:let cait_sith "nekoko")
	                (:echo cait_sith)))
	;==> Output the following Vim script to the current output port:
	;        let cait_sith = 'nekoko'
	;        echo cait_sith
<
- To introduce a Lisp-style macro to Visp script, use |(define-visp-syntax)|.

  Example: >
	(define-visp-syntax :aif XXX)
	(compile-visp '((:aif (+ 1 1)
	                 (:echo it)
			 (:echo "boo"))))
	;==> Output the following Vim script to the current output port:
	;        let it = 1 + 1
	;        if it
	;          echo it
	;        else
	;          echo "boo"
	;        endif
<


EX COMMANDS REFERENCE ~

(:XXX XXX ...)					*(:XXX)*
			XXX




==============================================================================
BUGS						*melissa-bugs*

- There are many bugs around the world.




==============================================================================
CHANGELOG					*melissa-changelog*

0.0.0	2009-01-11T09:20:12+09:00
	- Initial version.




==============================================================================
vim:tw=78:ts=8:ft=help:norl:fen:fdl=0:fdm=marker:
