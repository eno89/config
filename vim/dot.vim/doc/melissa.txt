*melissa.txt*	System to change Vim script into a programmable language

Version 0.0.0
Script ID: ****
Copyright (C) 2009 kana <http://whileimautomaton.net/>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*melissa-contents*

Introduction		|melissa-introduction|
Interface		|melissa-interface|
  External commands	  |melissa-external-commands|
  Scheme API		  |melissa-scheme-api|
  Melissa script	  |melissa-script|
Examples		|melissa-examples|
Bugs			|melissa-bugs|
Changelog		|melissa-changelog|




==============================================================================
INTRODUCTION					*melissa-introduction*

*melissa* is a Vim plugin to provide a system to write Vim script in its own
DSL based on Scheme.  It enables you to write Vim script in a programmable
programming language.  Why to use melissa?  Because:

- Vim script is weak.  Vim script is just a series of Ex commands and the
  syntax is too arbitrary as a programming language.
- There is several interfaces to other lantuages such as |if_tcl|, but they
  are not portable nor seemlessly integrated into Vim.
- And all of these problems are solved with melissa.


Requirements:
- Vim 7.2 or later
- Gauche 0.8.13 or later <http://practical-scheme.net/gauche/>

Latest version:
http://github.com/kana/config/commits/vim-melissa




==============================================================================
INTERFACE					*melissa-interface*

------------------------------------------------------------------------------
EXTERNAL COMMANDS				*melissa-external-commands*

melisssac					*melissac*
			External command to compile a |melissa-script| into
			a Vim script.  It reads a melissa script from the
			standard input and it writes the corresponding Vim
			script to the standard output.

			This command is found in the "bin" directory in
			a package of melissa.


------------------------------------------------------------------------------
SCHEME API					*melissa-scheme-api*

(compile-vise {vise} ...)			*(compile-vise)*
			Compile given {vise}s into a Vim script.
			Return value is a list of strings and each string is
			corresponding to an Ex command.

(define-vise-syntax ...)			*(define-vise-syntax)*
			FIXME: Define new syntax (= macro) for Vise.

(generate-vim-script {vise} ...)		*(generate-vim-script)*
			Compile given {vise}s with |(compile-vise)|,
			then write the compiled Vim script to the current
			output port.

(vise-macroexpand {form})			*(vise-macroexpand)*
			Like (macroexpand), but use |(vise-macroexpand1)| to
			expand macros.

(vise-macroexpand1 {form})			*(vise-macroexpand1)*
			Like (macroexpand1), but use macros defined by
			|(define-vise-syntax)| to expand {form}.


------------------------------------------------------------------------------
MELISSA SCRIPT					*melissa-script*

OVERVIEW ~

Melissa script is just a Scheme script, more precisely, Gauche script.  But
there are the following differences from ordinary Gauche script:

- Keywords (such as :keyword) are applicable.  For example, suppose you try to
  evaluate the following expression:
>
	(:set wrap!)
<
  If a keyword is applied to some arguments, the expression is treated as if
  it were like this:
>
	(generate-vim-script (:set wrap!))
<
  This expression generates a Vim script ":set wrap!" which is corresponding
  to the given expression "(:set wrap!)".


VISE ~

*Vise* is abbreviation for "Vim script In S-Expression" and it is
a S-expression notation for writing Vim script.  The summary of Vise is as
follows:

- A Vise expression is corresponding to an Ex command, a macro or a sequence
  of Vise expressions.
- An Ex command is expressed as a list which has a keyword as the first
  element.  The keyword is the name of the Ex command, and the rest elements
  are arguments for the Ex command.
- A macro is expressed as a list which has a keyword as the first element.
  The keyword is the name of the macro.
- A sequence of Vise expressions is expressed as a list of lists.  Each
  element is corresponding to a Vise expression as described here and the
  above.

FIXME: More about Vise.




==============================================================================
EXAMPLES					*melissa-examples*

FIXME:




==============================================================================
BUGS						*melissa-bugs*

KNOWN ISSUES ~

- Currently there is no known issue.


PLANNED FEATURES ~

- Addtional syntax file for filetype=scheme to edit Melissa script.

- Runtime compilation of Melissa script in Vim.




==============================================================================
CHANGELOG					*melissa-changelog*

0.0.0	2009-01-11T09:20:12+09:00
	- Initial version.




==============================================================================
vim:tw=78:ts=8:ft=help:norl:fen:fdl=0:fdm=marker:
