*tofunc.txt*	Text object for a function

Version 0.0
Copyright (C) 2007-2008 kana <http://whileimautomaton.net/>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*tofunc-contents*

Introduction		|tofunc-introduction|
Interface		|tofunc-interface|
  Key Mappings		  |tofunc-key-mappings|
Customizing		|tofunc-customizing|
Bugs			|tofunc-bugs|
Changelog		|tofunc-changelog|




==============================================================================
INTRODUCTION					*tofunc-introduction*

Tofunc is a Vim plugin to provide text objects for a function.

Requirements:
- Vim 7.1 or later.




==============================================================================
INTERFACE					*tofunc-interface*

------------------------------------------------------------------------------
KEY MAPPINGS					*tofunc-key-mappings*


In visual mode or operator-pending mode, the following text objects are
available.  Note that the fllowing mappings will not be defined when its {lhs}
is already mapped.

af						*af* *o_af* *v_af*
			``a function'', select the all range of a function.

if						*if* *o_if* *v_if*
			``inner function'', select the body of a function,
			other parts of a function are not included e.g. its
			name, its arguments and so forth).


For customization, the follownig mappings are available.

<Plug>TOFunc_A					*<Plug>TOFunc_A*
			``a function''.

<Plug>TOFunc_I					*<Plug>TOFunc_I*
			``inner function''.




==============================================================================
CUSTOMIZING					*tofunc-customizing*

TOFunc uses the following functions to get the appropriate range of a function
for the current 'filetype'.  See ftplugin/*_tofunc.vim in the archive of
TOFunc for examples.

g:TOFunc[&filetye].GetRangeA()			*tofunc-GetRangeA()*
			Like |GetRangeI()|, but returns the range of ``a
			function''.

g:TOFunc[&filetye].GetRangeI()			*tofunc-GetRangeI()*
			Returns the range of ``inner function''.  The return
			value is [b, e], where b is the beginning position and
			e is the end position of the range.  The detail of
			both values are same as |getpos()|. If there is no
			appropriate function, this function must return 0.

			Moving the cursor is allowed, but it is restored
			afterwards.




==============================================================================
BUGS						*tofunc-bugs*

- There are many bugs around the world.




==============================================================================
CHANGELOG					*tofunc-changelog*

0.0	2007-XX-XX
	- Initial version.




vim:tw=78:ts=8:ft=help:norl:fdm=marker:
