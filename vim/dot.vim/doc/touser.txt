*touser.txt*	Support for user-defined text objects

Version 0.0
Copyright (C) 2007 kana <http://nicht.s8.xrea.com/>
License: MIT license (see <http://www.opensource.org/licenses/mit-license>)
$Id$




==============================================================================
INTRODUCTION						*touser-introduction*

touser is a Vim plugin to support user-defined text objects which can be
defined by regular expression.




==============================================================================
FUNCTIONS						*touser-function*

TOUser_Move({pattern}, {flags})				*TOUser_Move()*
	Move the cursor to the appropriate object defined by {pattern}.

	{flags} is a string, which can contain the following character flags:
	'b'     search backward instead of forward.
	'e'     move to the end of the match.

	Return value is not defined.

TOUser_Select({pattern}, {flags}, {prevous-mode})	*TOUser_Select()*
	Select the appropriate object defined by {pattern}.
	If the cursor is already in the range of an object, select it.
	If the cursor is not in the range of an object, select the nearest
	object after the cursor.

	{flags} is a string, which can contain the following character flags:
		'b'     select the nearest object BEFORE the cursor if the
		        cursor is not in the range of an object.

	{previous-mode} is a string that represents the "previous" mode:
		'o'     Operator-pending mode
		'v'     Visual mode
	For example, if this function is called via a mapping for
	Operator-pending mode, {previous-mode} must be 'o'.

	Return value is not defined.

							*TOUser_SelectPair()*
TOUser_SelectPair({pattern1}, {pattern2}, {flags}, {previous-mode})
	Select the appropriate object which starts with {pattern1} and ends
	with {pattern2}.

	{flags} is a string, which can contain the following character flags:
	'a'     select the range including {pattern1} and {pattern2},
	        like |at|.
	'i'     select the range excluding {pattern1} and {pattern2},
		like |it|.  This is the default behavior unless 'a' is
		explicitly specified.  If there is not text between {pattern1}
		and {pattern2}, this function does nothing.

	For the detail of {previous-mode}, see |TOUser_Select()|.

	Return value is not defined.

							*TOUser_Define()*
TOUser_Define({pattern}, {pattern1}, {pattern2}, {guideline})
	Support function to define key mappings for the text object defined by
	{pattern}, or {pattern1} and {pattern2}.  {guideline} is a dictionary
	consists of key-value pairs where key is a string to represent the
	name of function and value is a list of strings (each string
	represents {lhs} for corresponding key).

	function name		meaning ~
	-------------		------- ~
	'move-to-next'		TOUser_Move({pattern}, '')
	'move-to-prev'		TOUser_Move({pattern}, 'b')
	'move-to-next-end'	TOUser_Move({pattern}, 'e')
	'move-to-prev-end'	TOUser_Move({pattern}, 'be')
	'select'		synonym for 'select-next'
	'select-next'		TOUser_Select({pattern}, '', {previous-mode})
	'select-prev'		TOUser_Select({pattern}, 'b', {previous-mode})
	'select-pair-all'	TOUser_SelectPair({pattern1}, {pattern2}, 'a',
				                  {previous-mode})
	'select-pair-inner'	TOUser_SelectPair({pattern1}, {pattern2}, 'i',
				                  {previous-mode})

	Example: >
		call TOUser_Define('foo', '', '',
		                 \ {'move-to-next': 'gj',
		                 \  'move-to-prev': 'gk',
		                 \  'select': ['ig', 'ag']})
<



==============================================================================
BUGS							*touser-bugs*

- TOUser_Select() and TOUser_SelectPair() override the current {Visual},
  unlike built-in text objects such as iw/aw, is/as, and so forth.

- TOUser_Select() and TOUser_SelectPair() cannot be used with [count].




==============================================================================
CHANGELOG						*touser-changelog*

0.0	2007-10-11T17:03:00+09:00
	- First release.




==============================================================================
vim:tw=78:ts=8:ft=help:norl:
