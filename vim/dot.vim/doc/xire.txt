*xire.txt*	Vim script into a programmable programming language

Version 0.0.0
Script ID: ****
Copyright (C) 2009 kana <http://whileimautomaton.net/>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:

    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS					*xire-contents*

Introduction            |xire-introduction|
Interface               |xire-interface|
  External Commands       |xire-external-commands|
  Xire Script             |xire-script|
  Scheme API              |xire-scheme-api|
  Xire Expression         |xire-expression|
Examples                |xire-examples|
Bugs                    |xire-bugs|
Changelog               |xire-changelog|




==============================================================================
INTRODUCTION					*xire-introduction*

*xire* is a system to write Vim script in a DSL based on Scheme.  It enables
you to write Vim script in a programmable programming language.  Why to use
xire?  Because:

- Vim script is weak.  Vim script is just a series of Ex commands and its
  syntax is too arbitrary as a programming language.  It's hard to write and
  it's nearly impossible to extend.
- There is several interfaces for other lantuages such as |if_tcl|, but they
  are not portable nor seemlessly integrated into Vim.
- And all of these problems are solved with xire.


Requirements:
- Vim 7.2 or later
- Gauche 0.8.13 or later <http://practical-scheme.net/gauche/>

Latest version:
http://github.com/kana/config/commits/vim-xire

Document in HTML format:
http://kana.github.com/config/vim/xire.html




==============================================================================
INTERFACE					*xire-interface*

------------------------------------------------------------------------------
EXTERNAL COMMANDS				*xire-external-commands*

xirec						*xirec*
			External command to compile a |xire-script| into a Vim
			script.  It reads a xire script from the standard
			input and it writes the resulting Vim script to the
			standard output.

			This command is found in the "bin" directory in
			a package of xire.


------------------------------------------------------------------------------
XIRE SCRIPT					*xire-script*

Xire script is a Scheme-based DSL to write Vim script.  It is mostly same as
Gauche script, but there are the following differences:

- Xire script consists of |xire-expression| or ordinary Scheme expression.
- If an expression is not a valid xire expression, then it is treated as
  ordinary Scheme expression.


------------------------------------------------------------------------------
SCHEME API					*xire-scheme-api*

In |xire-script|, the following API is available:

(define-xire-macro {name} {proc})		*(define-xire-macro)*
(define-xire-macro ({name} . {formals}) {body} ...)
			Define {name} to be a new macro whose transformer is
			{proc}.  The second form is a shorthand notation of
			the following form:
>
				(define-xire-macro {name}
				  (lambda {formals} . {body} ...))
<
			When a form ({name} {arg} ...) is seen by the compiler
			it calls {proc} with {arg} ..., the compiler inserts
			the returned form in place of the original form, and
			compiles it again.

						*(define-function)*
(define-function ({name} . {formals}) [{option} ...] {body} ...)
			Define {name} to be a new Vim function.

			This form is corresponding to |:function|.  Its output
			is roughly as follows:
>
				function! {name}({formals}) {option} ...
				  {body}
				endfunction
<
			{option} must be one of the following keyword:

				:abort
				:dict
				:range
				:without-!

			- The meanings of :abort, :dict and :range are
			  corresponding to [abort], [dict] and [range] for
			  |:function|.
			- By default, define-function appends [!] to
			  |:function| to override an existing definition.
			  If :without-! is given, [!] is not appended.

			{name} must follow the same naming rules of Vim,
			but there are the following exceptions:

			- {name} may contain "/".  It is translated to "#".
			- {name} may contain "-".  It is translated to "_".

						*(define-ex-command)*
(define-ex-command ({name} {formals}) {attr} ... {body} ...)
			Define {name} to be a new Ex command.

			This form is corresponding to |:command|.  Its output
			is roughly as follows:
>
				command! {attr} ... {name}
				\ call s:_cmd_{name}({arg}, ...)
				function! s:_cmd_{name}({formals})
				  {body}
				endfunction
<

(define-command ...)				*(define-command)*
			Alias of |(define-ex-command)|.

(define-key-mapping {modes} {options} {lhs} {rhs})	*(define-key-mapping)*
			Define a key mapping.

			This form is corresponding to |:map| and other
			commands.  Its output is roughly as follows:
>
				{modes}noremap {options} {lhs}  {rhs}
<
			{modes} is a list of the following symbols:

				Symbol	Corresponding modes ~
				------	------------------- ~
				c	Command-line mode
				i	Insert mode
				l	|language-mapping|
				n	Normal mode
				o	Operator-pending mode
				s	Select mode
				v	Visual mode / Select mode
				x	Visual mode
				motion	Alias for (n o v)
				object	Alias for (o v)
				all	Alias for (c i n o v) = all modes

			{options} is a list of the following symbols:

				Symbol	Meanings ~
				------	-------- ~
				buffer	|:map-<buffer>|
				expr	|:map-<expr>|
				remap	Allow remapping of {rhs}
				script	|:map-<script>|
				silent	|:map-<silent>|
				unique	|:map-<unique>|

(define-map ...)				*(define-map)*
			Alias of |(define-key-mapping)|.

(:raw-vim-script {snippet} ...)			*(:raw-vim-script)*
			Add {snippet} of raw Vim script to resulting Vim
			script.  Use with care.


------------------------------------------------------------------------------
XIRE EXPRESSION					*xire-expression*

Xire expression is an S-expression notation to write Vim script.  The details
of the notation are as follows:

FIXME: Details on xire expression.




==============================================================================
EXAMPLES					*xire-examples*

FIXME: Examples.




==============================================================================
BUGS						*xire-bugs*

- There is no known bug.




==============================================================================
CHANGELOG					*xire-changelog*

0.0.0	2009-01-11T09:20:12+09:00		*xire-changelog-0.0.0*
	- Initial version.




==============================================================================
vim:tw=78:ts=8:ft=help:norl:fen:fdl=0:fdm=marker:
