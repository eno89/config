===== "Check the existence of <SID>(count) in each mode"
TEST: maparg(_, 'c') != ''  ==>  0 ... ok
TEST: maparg(_, 'i') != ''  ==>  0 ... ok
TEST: maparg(_, 'n') != ''  ==>  1 ... ok
TEST: maparg(_, 'o') != ''  ==>  0 ... ok
TEST: maparg(_, 'v') != ''  ==>  0 ... ok
Result: 5 / 5

===== "operator#user#define(): Typical usage"
TEST: maparg('<Plug>(operator-sort)', 'c') != ''  ==>  0 ... ok
TEST: maparg('<Plug>(operator-sort)', 'i') != ''  ==>  0 ... ok
TEST: maparg('<Plug>(operator-sort)', 'n') != ''  ==>  1 ... ok
TEST: maparg('<Plug>(operator-sort)', 'o') != ''  ==>  1 ... ok
TEST: maparg('<Plug>(operator-sort)', 'v') != ''  ==>  1 ... ok
TEST: maparg('<Plug>(operator-sort)', 'n')      =~# '\<TestOperatorFunction1\>'       ==>  1 ... ok
TEST: maparg('<Plug>(operator-sort)', 'o')  ==>  'g@' ... ok
TEST: maparg('<Plug>(operator-sort)', 'v')      =~# '\<TestOperatorFunction1\>'       ==>  1 ... ok
TEST: maparg('_', 'c') != ''  ==>  0 ... ok
TEST: maparg('_', 'i') != ''  ==>  0 ... ok
TEST: maparg('_', 'n') != ''  ==>  1 ... ok
TEST: maparg('_', 'o') != ''  ==>  1 ... ok
TEST: maparg('_', 'v') != ''  ==>  1 ... ok
TEST: maparg('_', 'n')  ==>  '<Plug>(operator-sort)' ... ok
TEST: maparg('_', 'o')  ==>  '<Plug>(operator-sort)' ... ok
TEST: maparg('_', 'v')  ==>  '<Plug>(operator-sort)' ... ok
TEST: getline('.', line('.')+4)  ==>  ['a', 'a', 'e', 'm', 'n'] ... ok
TEST: getline('.', line('.')+4)  ==>  ['a', 'i', 'l', 'r', 'v'] ... ok
TEST: getline('.', line('.')+4)  ==>  ['a', 'e', 'g', 'n', 's'] ... ok
TEST: getline('.', line('.')+4)  ==>  ['a', 'e', 'g', 'n', 's'] ... FAILED
  Actual value: ['a', 'g', 'n', 'e', 's']
  Expected value: ['a', 'e', 'g', 'n', 's']
Result: 19 / 20

===== "operator#user#define(): With {extra}s"
TEST: @0  ==>  "a\n" ... ok
TEST: @0  ==>  "a\nz\nu\n" ... ok
TEST: @0  ==>  "a\nz\nu\ns\na\n" ... ok
Result: 3 / 3

===== "operator#user#define(): With script-local function"
TEST: maparg('<Plug>(operator-sort)', 'c') != ''  ==>  0 ... ok
TEST: maparg('<Plug>(operator-sort)', 'i') != ''  ==>  0 ... ok
TEST: maparg('<Plug>(operator-sort)', 'n') != ''  ==>  1 ... ok
TEST: maparg('<Plug>(operator-sort)', 'o') != ''  ==>  1 ... ok
TEST: maparg('<Plug>(operator-sort)', 'v') != ''  ==>  1 ... ok
TEST: maparg('<Plug>(operator-sort)', 'n')      =~# '\<test_operator_function_3\>'       ==>  1 ... ok
TEST: maparg('<Plug>(operator-sort)', 'o')  ==>  'g@' ... ok
TEST: maparg('<Plug>(operator-sort)', 'v')      =~# '\<test_operator_function_3\>'       ==>  1 ... ok
TEST: maparg('@', 'c') != ''  ==>  0 ... ok
TEST: maparg('@', 'i') != ''  ==>  0 ... ok
TEST: maparg('@', 'n') != ''  ==>  1 ... ok
TEST: maparg('@', 'o') != ''  ==>  1 ... ok
TEST: maparg('@', 'v') != ''  ==>  1 ... ok
TEST: maparg('@', 'n')  ==>  '<Plug>(operator-sort)' ... ok
TEST: maparg('@', 'o')  ==>  '<Plug>(operator-sort)' ... ok
TEST: maparg('@', 'v')  ==>  '<Plug>(operator-sort)' ... ok
TEST: getline('.', line('.')+4)  ==>  ['a', 'a', 'e', 'm', 'n'] ... ok
TEST: getline('.', line('.')+4)  ==>  ['a', 'i', 'l', 'r', 'v'] ... ok
TEST: getline('.', line('.')+4)  ==>  ['a', 'e', 'g', 'n', 's'] ... ok
TEST: getline('.', line('.')+4)  ==>  ['a', 'e', 'g', 'n', 's'] ... FAILED
  Actual value: ['a', 'g', 'n', 'e', 's']
  Expected value: ['a', 'e', 'g', 'n', 's']
Result: 19 / 20

===== "operator#user#define(): count in Visual mode"
TEST: getline('.', line('.')+1)  ==>  ['avriL AGnes', 'amane alice'] ... ok
TEST: getline('.', line('.')+1)  ==>  ['avrIl agnes', 'amane alice'] ... ok
Result: 2 / 2

===== "operator#user#define_ex_command(): Typical usage"
TEST: getline('.', line('.')+1)  ==>  ['a m a n', 'e'] ... ok
TEST: getline('.', line('.')+1)  ==>  ['a v r i', 'l'] ... ok
TEST: getline('.', line('.')+2)  ==>  ['a g n', 'e', 's'] ... ok
TEST: getline('.', line('.')+1)  ==>  ['a m a n', 'e'] ... ok
TEST: getline('.', line('.')+1)  ==>  ['a g n e', 's'] ... FAILED
  Actual value: ['a', 'g']
  Expected value: ['a g n e', 's']
TEST: getline('.', line('.')+4)  ==>  ['a', 'g', 'n', 'e', 's'] ... ok
Result: 5 / 6

===== "register designation for user defined operator"
TEST: getline('.')  ==>  '"' ... ok
TEST: getline('.')  ==>  '"' ... ok
TEST: getline('.')  ==>  'A' ... ok
TEST: getline('.')  ==>  'x' ... ok
TEST: getline('.')  ==>  'y' ... ok
TEST: getline('.')  ==>  '"' ... ok
TEST: getline('.')  ==>  '"' ... ok
TEST: getline('.')  ==>  'A' ... ok
TEST: getline('.')  ==>  'x' ... ok
TEST: getline('.')  ==>  'y' ... ok
Result: 10 / 10

===== "operator#user#visual_command_from_wise_name()"
TEST: _  ==>  'v' ... ok
TEST: v:errmsg  ==>  '' ... ok
TEST: operator#user#visual_command_from_wise_name('line')  ==>  'V' ... ok
TEST: v:errmsg  ==>  '' ... ok
TEST: operator#user#visual_command_from_wise_name('block')  ==>  "\<C-v>" ... ok
TEST: v:errmsg  ==>  '' ... ok
TEST: _  ==>  'v' ... ok
TEST: v:errmsg =~# 'operator-user:E1:' ==>  1 ... ok
TEST: _  ==>  'v' ... ok
TEST: v:errmsg =~# 'operator-user:E1:' ==>  1 ... ok
TEST: _  ==>  'v' ... ok
TEST: v:errmsg =~# 'operator-user:E1:' ==>  1 ... ok
TEST: _  ==>  'v' ... ok
TEST: v:errmsg =~# 'operator-user:E1:' ==>  1 ... ok
Result: 14 / 14

===== Total
Result: 77 / 80
